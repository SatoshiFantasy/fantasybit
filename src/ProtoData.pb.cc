// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fantasybit {

namespace {

const ::google::protobuf::Descriptor* MyFantasyName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MyFantasyName_reflection_ = NULL;
const ::google::protobuf::Descriptor* Secret_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Secret_reflection_ = NULL;
const ::google::protobuf::Descriptor* FantasyNameT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FantasyNameT_reflection_ = NULL;
const ::google::protobuf::Descriptor* BitStake_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BitStake_reflection_ = NULL;
const ::google::protobuf::Descriptor* NameTransaction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NameTransaction_reflection_ = NULL;
const ::google::protobuf::Descriptor* OutData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OutData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MyNameStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoData_2eproto() {
  protobuf_AddDesc_ProtoData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoData.proto");
  GOOGLE_CHECK(file != NULL);
  MyFantasyName_descriptor_ = file->message_type(0);
  static const int MyFantasyName_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyFantasyName, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyFantasyName, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyFantasyName, fantasyname_),
  };
  MyFantasyName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MyFantasyName_descriptor_,
      MyFantasyName::default_instance_,
      MyFantasyName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyFantasyName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyFantasyName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MyFantasyName));
  Secret_descriptor_ = file->message_type(1);
  static const int Secret_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret, private_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret, myfantasyname_),
  };
  Secret_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Secret_descriptor_,
      Secret::default_instance_,
      Secret_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Secret));
  FantasyNameT_descriptor_ = file->message_type(2);
  static const int FantasyNameT_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyNameT, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyNameT, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyNameT, balances_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyNameT, name_),
  };
  FantasyNameT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FantasyNameT_descriptor_,
      FantasyNameT::default_instance_,
      FantasyNameT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyNameT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FantasyNameT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FantasyNameT));
  BitStake_descriptor_ = file->message_type(3);
  static const int BitStake_offsets_[1] = {
  };
  BitStake_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BitStake_descriptor_,
      BitStake::default_instance_,
      BitStake_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitStake, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitStake, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BitStake));
  NameTransaction_descriptor_ = file->message_type(4);
  static const int NameTransaction_offsets_[1] = {
  };
  NameTransaction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NameTransaction_descriptor_,
      NameTransaction::default_instance_,
      NameTransaction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameTransaction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameTransaction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NameTransaction));
  OutData_descriptor_ = file->message_type(5);
  static const int OutData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutData, type_),
  };
  OutData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OutData_descriptor_,
      OutData::default_instance_,
      OutData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutData, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutData, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OutData));
  MyNameStatus_descriptor_ = file->enum_type(0);
  Type_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MyFantasyName_descriptor_, &MyFantasyName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Secret_descriptor_, &Secret::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FantasyNameT_descriptor_, &FantasyNameT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BitStake_descriptor_, &BitStake::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NameTransaction_descriptor_, &NameTransaction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OutData_descriptor_, &OutData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoData_2eproto() {
  delete MyFantasyName::default_instance_;
  delete MyFantasyName_reflection_;
  delete Secret::default_instance_;
  delete Secret_reflection_;
  delete FantasyNameT::default_instance_;
  delete FantasyNameT_reflection_;
  delete BitStake::default_instance_;
  delete BitStake_reflection_;
  delete NameTransaction::default_instance_;
  delete NameTransaction_reflection_;
  delete OutData::default_instance_;
  delete OutData_reflection_;
}

void protobuf_AddDesc_ProtoData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017ProtoData.proto\022\nfantasybit\"y\n\rMyFanta"
    "syName\022\014\n\004name\030\001 \002(\t\022(\n\006status\030\002 \002(\0162\030.f"
    "antasybit.MyNameStatus\0220\n\013fantasyname\030\003 "
    "\001(\0132\033.fantasybit.NameTransaction\"O\n\006Secr"
    "et\022\023\n\013private_key\030\001 \002(\t\0220\n\rmyfantasyname"
    "\030\002 \001(\0132\031.fantasybit.MyFantasyName\"f\n\014Fan"
    "tasyNameT\022\022\n\npublic_key\030\001 \002(\t\022\014\n\004hash\030\002 "
    "\002(\t\022&\n\010balances\030\003 \002(\0132\024.fantasybit.BitSt"
    "ake\022\014\n\004name\030\004 \001(\t\"\n\n\010BitStake\"\021\n\017NameTra"
    "nsaction\"3\n\007OutData\022\036\n\004type\030\001 \002(\0162\020.fant"
    "asybit.Type*\010\010d\020\200\200\200\200\002*W\n\014MyNameStatus\022\010\n"
    "\004none\020\001\022\r\n\trequested\020\002\022\t\n\005found\020\003\022\024\n\020tra"
    "nsaction_sent\020\004\022\r\n\tconfirmed\020\005*\031\n\004Type\022\021"
    "\n\rMYFANTASYNAME\020\001:I\n\021myfantasyname_ext\022\023"
    ".fantasybit.OutData\030d \001(\0132\031.fantasybit.M"
    "yFantasyName", 612);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoData.proto", &protobuf_RegisterTypes);
  MyFantasyName::default_instance_ = new MyFantasyName();
  Secret::default_instance_ = new Secret();
  FantasyNameT::default_instance_ = new FantasyNameT();
  BitStake::default_instance_ = new BitStake();
  NameTransaction::default_instance_ = new NameTransaction();
  OutData::default_instance_ = new OutData();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::fantasybit::OutData::default_instance(),
    100, 11, false, false,
    &::fantasybit::MyFantasyName::default_instance());
  MyFantasyName::default_instance_->InitAsDefaultInstance();
  Secret::default_instance_->InitAsDefaultInstance();
  FantasyNameT::default_instance_->InitAsDefaultInstance();
  BitStake::default_instance_->InitAsDefaultInstance();
  NameTransaction::default_instance_->InitAsDefaultInstance();
  OutData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoData_2eproto {
  StaticDescriptorInitializer_ProtoData_2eproto() {
    protobuf_AddDesc_ProtoData_2eproto();
  }
} static_descriptor_initializer_ProtoData_2eproto_;
const ::google::protobuf::EnumDescriptor* MyNameStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MyNameStatus_descriptor_;
}
bool MyNameStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Type_descriptor_;
}
bool Type_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MyFantasyName::kNameFieldNumber;
const int MyFantasyName::kStatusFieldNumber;
const int MyFantasyName::kFantasynameFieldNumber;
#endif  // !_MSC_VER

MyFantasyName::MyFantasyName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MyFantasyName::InitAsDefaultInstance() {
  fantasyname_ = const_cast< ::fantasybit::NameTransaction*>(&::fantasybit::NameTransaction::default_instance());
}

MyFantasyName::MyFantasyName(const MyFantasyName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MyFantasyName::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 1;
  fantasyname_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MyFantasyName::~MyFantasyName() {
  SharedDtor();
}

void MyFantasyName::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete fantasyname_;
  }
}

void MyFantasyName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MyFantasyName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MyFantasyName_descriptor_;
}

const MyFantasyName& MyFantasyName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

MyFantasyName* MyFantasyName::default_instance_ = NULL;

MyFantasyName* MyFantasyName::New() const {
  return new MyFantasyName;
}

void MyFantasyName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    status_ = 1;
    if (has_fantasyname()) {
      if (fantasyname_ != NULL) fantasyname_->::fantasybit::NameTransaction::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MyFantasyName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .fantasybit.MyNameStatus status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::MyNameStatus_IsValid(value)) {
            set_status(static_cast< ::fantasybit::MyNameStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fantasyname;
        break;
      }

      // optional .fantasybit.NameTransaction fantasyname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fantasyname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fantasyname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MyFantasyName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required .fantasybit.MyNameStatus status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional .fantasybit.NameTransaction fantasyname = 3;
  if (has_fantasyname()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fantasyname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MyFantasyName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .fantasybit.MyNameStatus status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // optional .fantasybit.NameTransaction fantasyname = 3;
  if (has_fantasyname()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fantasyname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MyFantasyName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .fantasybit.MyNameStatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional .fantasybit.NameTransaction fantasyname = 3;
    if (has_fantasyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fantasyname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MyFantasyName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MyFantasyName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MyFantasyName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MyFantasyName::MergeFrom(const MyFantasyName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_fantasyname()) {
      mutable_fantasyname()->::fantasybit::NameTransaction::MergeFrom(from.fantasyname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MyFantasyName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyFantasyName::CopyFrom(const MyFantasyName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyFantasyName::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MyFantasyName::Swap(MyFantasyName* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(status_, other->status_);
    std::swap(fantasyname_, other->fantasyname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MyFantasyName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MyFantasyName_descriptor_;
  metadata.reflection = MyFantasyName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Secret::kPrivateKeyFieldNumber;
const int Secret::kMyfantasynameFieldNumber;
#endif  // !_MSC_VER

Secret::Secret()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Secret::InitAsDefaultInstance() {
  myfantasyname_ = const_cast< ::fantasybit::MyFantasyName*>(&::fantasybit::MyFantasyName::default_instance());
}

Secret::Secret(const Secret& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Secret::SharedCtor() {
  _cached_size_ = 0;
  private_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  myfantasyname_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Secret::~Secret() {
  SharedDtor();
}

void Secret::SharedDtor() {
  if (private_key_ != &::google::protobuf::internal::kEmptyString) {
    delete private_key_;
  }
  if (this != default_instance_) {
    delete myfantasyname_;
  }
}

void Secret::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Secret::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Secret_descriptor_;
}

const Secret& Secret::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

Secret* Secret::default_instance_ = NULL;

Secret* Secret::New() const {
  return new Secret;
}

void Secret::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_private_key()) {
      if (private_key_ != &::google::protobuf::internal::kEmptyString) {
        private_key_->clear();
      }
    }
    if (has_myfantasyname()) {
      if (myfantasyname_ != NULL) myfantasyname_->::fantasybit::MyFantasyName::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Secret::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string private_key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_private_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->private_key().data(), this->private_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_myfantasyname;
        break;
      }

      // optional .fantasybit.MyFantasyName myfantasyname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_myfantasyname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_myfantasyname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Secret::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string private_key = 1;
  if (has_private_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->private_key().data(), this->private_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->private_key(), output);
  }

  // optional .fantasybit.MyFantasyName myfantasyname = 2;
  if (has_myfantasyname()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->myfantasyname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Secret::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string private_key = 1;
  if (has_private_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->private_key().data(), this->private_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->private_key(), target);
  }

  // optional .fantasybit.MyFantasyName myfantasyname = 2;
  if (has_myfantasyname()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->myfantasyname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Secret::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string private_key = 1;
    if (has_private_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->private_key());
    }

    // optional .fantasybit.MyFantasyName myfantasyname = 2;
    if (has_myfantasyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->myfantasyname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Secret::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Secret* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Secret*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Secret::MergeFrom(const Secret& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_private_key()) {
      set_private_key(from.private_key());
    }
    if (from.has_myfantasyname()) {
      mutable_myfantasyname()->::fantasybit::MyFantasyName::MergeFrom(from.myfantasyname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Secret::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Secret::CopyFrom(const Secret& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Secret::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_myfantasyname()) {
    if (!this->myfantasyname().IsInitialized()) return false;
  }
  return true;
}

void Secret::Swap(Secret* other) {
  if (other != this) {
    std::swap(private_key_, other->private_key_);
    std::swap(myfantasyname_, other->myfantasyname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Secret::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Secret_descriptor_;
  metadata.reflection = Secret_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FantasyNameT::kPublicKeyFieldNumber;
const int FantasyNameT::kHashFieldNumber;
const int FantasyNameT::kBalancesFieldNumber;
const int FantasyNameT::kNameFieldNumber;
#endif  // !_MSC_VER

FantasyNameT::FantasyNameT()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FantasyNameT::InitAsDefaultInstance() {
  balances_ = const_cast< ::fantasybit::BitStake*>(&::fantasybit::BitStake::default_instance());
}

FantasyNameT::FantasyNameT(const FantasyNameT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FantasyNameT::SharedCtor() {
  _cached_size_ = 0;
  public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  balances_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FantasyNameT::~FantasyNameT() {
  SharedDtor();
}

void FantasyNameT::SharedDtor() {
  if (public_key_ != &::google::protobuf::internal::kEmptyString) {
    delete public_key_;
  }
  if (hash_ != &::google::protobuf::internal::kEmptyString) {
    delete hash_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete balances_;
  }
}

void FantasyNameT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FantasyNameT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FantasyNameT_descriptor_;
}

const FantasyNameT& FantasyNameT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

FantasyNameT* FantasyNameT::default_instance_ = NULL;

FantasyNameT* FantasyNameT::New() const {
  return new FantasyNameT;
}

void FantasyNameT::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_public_key()) {
      if (public_key_ != &::google::protobuf::internal::kEmptyString) {
        public_key_->clear();
      }
    }
    if (has_hash()) {
      if (hash_ != &::google::protobuf::internal::kEmptyString) {
        hash_->clear();
      }
    }
    if (has_balances()) {
      if (balances_ != NULL) balances_->::fantasybit::BitStake::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FantasyNameT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string public_key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_public_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->public_key().data(), this->public_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hash;
        break;
      }

      // required string hash = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hash().data(), this->hash().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_balances;
        break;
      }

      // required .fantasybit.BitStake balances = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_balances:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_balances()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FantasyNameT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string public_key = 1;
  if (has_public_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->public_key().data(), this->public_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->public_key(), output);
  }

  // required string hash = 2;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->hash(), output);
  }

  // required .fantasybit.BitStake balances = 3;
  if (has_balances()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->balances(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FantasyNameT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string public_key = 1;
  if (has_public_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->public_key().data(), this->public_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->public_key(), target);
  }

  // required string hash = 2;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hash(), target);
  }

  // required .fantasybit.BitStake balances = 3;
  if (has_balances()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->balances(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FantasyNameT::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string public_key = 1;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->public_key());
    }

    // required string hash = 2;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hash());
    }

    // required .fantasybit.BitStake balances = 3;
    if (has_balances()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->balances());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FantasyNameT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FantasyNameT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FantasyNameT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FantasyNameT::MergeFrom(const FantasyNameT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_public_key()) {
      set_public_key(from.public_key());
    }
    if (from.has_hash()) {
      set_hash(from.hash());
    }
    if (from.has_balances()) {
      mutable_balances()->::fantasybit::BitStake::MergeFrom(from.balances());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FantasyNameT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FantasyNameT::CopyFrom(const FantasyNameT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FantasyNameT::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void FantasyNameT::Swap(FantasyNameT* other) {
  if (other != this) {
    std::swap(public_key_, other->public_key_);
    std::swap(hash_, other->hash_);
    std::swap(balances_, other->balances_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FantasyNameT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FantasyNameT_descriptor_;
  metadata.reflection = FantasyNameT_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

BitStake::BitStake()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BitStake::InitAsDefaultInstance() {
}

BitStake::BitStake(const BitStake& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BitStake::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BitStake::~BitStake() {
  SharedDtor();
}

void BitStake::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BitStake::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BitStake::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BitStake_descriptor_;
}

const BitStake& BitStake::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

BitStake* BitStake::default_instance_ = NULL;

BitStake* BitStake::New() const {
  return new BitStake;
}

void BitStake::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BitStake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void BitStake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BitStake::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BitStake::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BitStake::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BitStake* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BitStake*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BitStake::MergeFrom(const BitStake& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BitStake::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BitStake::CopyFrom(const BitStake& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BitStake::IsInitialized() const {

  return true;
}

void BitStake::Swap(BitStake* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BitStake::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BitStake_descriptor_;
  metadata.reflection = BitStake_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

NameTransaction::NameTransaction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NameTransaction::InitAsDefaultInstance() {
}

NameTransaction::NameTransaction(const NameTransaction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NameTransaction::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NameTransaction::~NameTransaction() {
  SharedDtor();
}

void NameTransaction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NameTransaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NameTransaction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NameTransaction_descriptor_;
}

const NameTransaction& NameTransaction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

NameTransaction* NameTransaction::default_instance_ = NULL;

NameTransaction* NameTransaction::New() const {
  return new NameTransaction;
}

void NameTransaction::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NameTransaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NameTransaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NameTransaction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NameTransaction::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NameTransaction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NameTransaction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NameTransaction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NameTransaction::MergeFrom(const NameTransaction& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NameTransaction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NameTransaction::CopyFrom(const NameTransaction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameTransaction::IsInitialized() const {

  return true;
}

void NameTransaction::Swap(NameTransaction* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NameTransaction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NameTransaction_descriptor_;
  metadata.reflection = NameTransaction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OutData::kTypeFieldNumber;
#endif  // !_MSC_VER

OutData::OutData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OutData::InitAsDefaultInstance() {
}

OutData::OutData(const OutData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OutData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OutData::~OutData() {
  SharedDtor();
}

void OutData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OutData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OutData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OutData_descriptor_;
}

const OutData& OutData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoData_2eproto();
  return *default_instance_;
}

OutData* OutData::default_instance_ = NULL;

OutData* OutData::New() const {
  return new OutData;
}

void OutData::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OutData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .fantasybit.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::fantasybit::Type_IsValid(value)) {
            set_type(static_cast< ::fantasybit::Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((800u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OutData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .fantasybit.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // Extension range [100, 536870912)
  _extensions_.SerializeWithCachedSizes(
      100, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OutData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .fantasybit.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // Extension range [100, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OutData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .fantasybit.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OutData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OutData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OutData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OutData::MergeFrom(const OutData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OutData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutData::CopyFrom(const OutData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void OutData::Swap(OutData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata OutData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OutData_descriptor_;
  metadata.reflection = OutData_reflection_;
  return metadata;
}

::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::OutData,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::MyFantasyName >, 11, false >
  myfantasyname_ext(kMyfantasynameExtFieldNumber, ::fantasybit::MyFantasyName::default_instance());

// @@protoc_insertion_point(namespace_scope)

}  // namespace fantasybit

// @@protoc_insertion_point(global_scope)
