// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoData.proto

#ifndef PROTOBUF_ProtoData_2eproto__INCLUDED
#define PROTOBUF_ProtoData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace fantasybit {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProtoData_2eproto();
void protobuf_AssignDesc_ProtoData_2eproto();
void protobuf_ShutdownFile_ProtoData_2eproto();

class MyFantasyName;
class Secret;
class FantasyNameT;
class BitStake;
class NameTransaction;
class OutData;

enum MyNameStatus {
  none = 1,
  requested = 2,
  found = 3,
  transaction_sent = 4,
  confirmed = 5
};
bool MyNameStatus_IsValid(int value);
const MyNameStatus MyNameStatus_MIN = none;
const MyNameStatus MyNameStatus_MAX = confirmed;
const int MyNameStatus_ARRAYSIZE = MyNameStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* MyNameStatus_descriptor();
inline const ::std::string& MyNameStatus_Name(MyNameStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    MyNameStatus_descriptor(), value);
}
inline bool MyNameStatus_Parse(
    const ::std::string& name, MyNameStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MyNameStatus>(
    MyNameStatus_descriptor(), name, value);
}
enum Type {
  MYFANTASYNAME = 1
};
bool Type_IsValid(int value);
const Type Type_MIN = MYFANTASYNAME;
const Type Type_MAX = MYFANTASYNAME;
const int Type_ARRAYSIZE = Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Type_descriptor();
inline const ::std::string& Type_Name(Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Type_descriptor(), value);
}
inline bool Type_Parse(
    const ::std::string& name, Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Type>(
    Type_descriptor(), name, value);
}
// ===================================================================

class MyFantasyName : public ::google::protobuf::Message {
 public:
  MyFantasyName();
  virtual ~MyFantasyName();

  MyFantasyName(const MyFantasyName& from);

  inline MyFantasyName& operator=(const MyFantasyName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MyFantasyName& default_instance();

  void Swap(MyFantasyName* other);

  // implements Message ----------------------------------------------

  MyFantasyName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MyFantasyName& from);
  void MergeFrom(const MyFantasyName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required .fantasybit.MyNameStatus status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::fantasybit::MyNameStatus status() const;
  inline void set_status(::fantasybit::MyNameStatus value);

  // optional .fantasybit.NameTransaction fantasyname = 3;
  inline bool has_fantasyname() const;
  inline void clear_fantasyname();
  static const int kFantasynameFieldNumber = 3;
  inline const ::fantasybit::NameTransaction& fantasyname() const;
  inline ::fantasybit::NameTransaction* mutable_fantasyname();
  inline ::fantasybit::NameTransaction* release_fantasyname();
  inline void set_allocated_fantasyname(::fantasybit::NameTransaction* fantasyname);

  // @@protoc_insertion_point(class_scope:fantasybit.MyFantasyName)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_fantasyname();
  inline void clear_has_fantasyname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::fantasybit::NameTransaction* fantasyname_;
  int status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static MyFantasyName* default_instance_;
};
// -------------------------------------------------------------------

class Secret : public ::google::protobuf::Message {
 public:
  Secret();
  virtual ~Secret();

  Secret(const Secret& from);

  inline Secret& operator=(const Secret& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Secret& default_instance();

  void Swap(Secret* other);

  // implements Message ----------------------------------------------

  Secret* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Secret& from);
  void MergeFrom(const Secret& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string private_key = 1;
  inline bool has_private_key() const;
  inline void clear_private_key();
  static const int kPrivateKeyFieldNumber = 1;
  inline const ::std::string& private_key() const;
  inline void set_private_key(const ::std::string& value);
  inline void set_private_key(const char* value);
  inline void set_private_key(const char* value, size_t size);
  inline ::std::string* mutable_private_key();
  inline ::std::string* release_private_key();
  inline void set_allocated_private_key(::std::string* private_key);

  // optional .fantasybit.MyFantasyName myfantasyname = 2;
  inline bool has_myfantasyname() const;
  inline void clear_myfantasyname();
  static const int kMyfantasynameFieldNumber = 2;
  inline const ::fantasybit::MyFantasyName& myfantasyname() const;
  inline ::fantasybit::MyFantasyName* mutable_myfantasyname();
  inline ::fantasybit::MyFantasyName* release_myfantasyname();
  inline void set_allocated_myfantasyname(::fantasybit::MyFantasyName* myfantasyname);

  // @@protoc_insertion_point(class_scope:fantasybit.Secret)
 private:
  inline void set_has_private_key();
  inline void clear_has_private_key();
  inline void set_has_myfantasyname();
  inline void clear_has_myfantasyname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* private_key_;
  ::fantasybit::MyFantasyName* myfantasyname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static Secret* default_instance_;
};
// -------------------------------------------------------------------

class FantasyNameT : public ::google::protobuf::Message {
 public:
  FantasyNameT();
  virtual ~FantasyNameT();

  FantasyNameT(const FantasyNameT& from);

  inline FantasyNameT& operator=(const FantasyNameT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FantasyNameT& default_instance();

  void Swap(FantasyNameT* other);

  // implements Message ----------------------------------------------

  FantasyNameT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FantasyNameT& from);
  void MergeFrom(const FantasyNameT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string public_key = 1;
  inline bool has_public_key() const;
  inline void clear_public_key();
  static const int kPublicKeyFieldNumber = 1;
  inline const ::std::string& public_key() const;
  inline void set_public_key(const ::std::string& value);
  inline void set_public_key(const char* value);
  inline void set_public_key(const char* value, size_t size);
  inline ::std::string* mutable_public_key();
  inline ::std::string* release_public_key();
  inline void set_allocated_public_key(::std::string* public_key);

  // required string hash = 2;
  inline bool has_hash() const;
  inline void clear_hash();
  static const int kHashFieldNumber = 2;
  inline const ::std::string& hash() const;
  inline void set_hash(const ::std::string& value);
  inline void set_hash(const char* value);
  inline void set_hash(const char* value, size_t size);
  inline ::std::string* mutable_hash();
  inline ::std::string* release_hash();
  inline void set_allocated_hash(::std::string* hash);

  // required .fantasybit.BitStake balances = 3;
  inline bool has_balances() const;
  inline void clear_balances();
  static const int kBalancesFieldNumber = 3;
  inline const ::fantasybit::BitStake& balances() const;
  inline ::fantasybit::BitStake* mutable_balances();
  inline ::fantasybit::BitStake* release_balances();
  inline void set_allocated_balances(::fantasybit::BitStake* balances);

  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:fantasybit.FantasyNameT)
 private:
  inline void set_has_public_key();
  inline void clear_has_public_key();
  inline void set_has_hash();
  inline void clear_has_hash();
  inline void set_has_balances();
  inline void clear_has_balances();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* public_key_;
  ::std::string* hash_;
  ::fantasybit::BitStake* balances_;
  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static FantasyNameT* default_instance_;
};
// -------------------------------------------------------------------

class BitStake : public ::google::protobuf::Message {
 public:
  BitStake();
  virtual ~BitStake();

  BitStake(const BitStake& from);

  inline BitStake& operator=(const BitStake& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BitStake& default_instance();

  void Swap(BitStake* other);

  // implements Message ----------------------------------------------

  BitStake* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BitStake& from);
  void MergeFrom(const BitStake& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:fantasybit.BitStake)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static BitStake* default_instance_;
};
// -------------------------------------------------------------------

class NameTransaction : public ::google::protobuf::Message {
 public:
  NameTransaction();
  virtual ~NameTransaction();

  NameTransaction(const NameTransaction& from);

  inline NameTransaction& operator=(const NameTransaction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NameTransaction& default_instance();

  void Swap(NameTransaction* other);

  // implements Message ----------------------------------------------

  NameTransaction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NameTransaction& from);
  void MergeFrom(const NameTransaction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:fantasybit.NameTransaction)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static NameTransaction* default_instance_;
};
// -------------------------------------------------------------------

class OutData : public ::google::protobuf::Message {
 public:
  OutData();
  virtual ~OutData();

  OutData(const OutData& from);

  inline OutData& operator=(const OutData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OutData& default_instance();

  void Swap(OutData* other);

  // implements Message ----------------------------------------------

  OutData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OutData& from);
  void MergeFrom(const OutData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .fantasybit.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::fantasybit::Type type() const;
  inline void set_type(::fantasybit::Type value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(OutData)
  // @@protoc_insertion_point(class_scope:fantasybit.OutData)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static OutData* default_instance_;
};
// ===================================================================

static const int kMyfantasynameExtFieldNumber = 100;
extern ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::OutData,
    ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::MyFantasyName >, 11, false >
  myfantasyname_ext;

// ===================================================================

// MyFantasyName

// required string name = 1;
inline bool MyFantasyName::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MyFantasyName::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MyFantasyName::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MyFantasyName::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MyFantasyName::name() const {
  return *name_;
}
inline void MyFantasyName::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MyFantasyName::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MyFantasyName::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MyFantasyName::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* MyFantasyName::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MyFantasyName::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .fantasybit.MyNameStatus status = 2;
inline bool MyFantasyName::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MyFantasyName::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MyFantasyName::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MyFantasyName::clear_status() {
  status_ = 1;
  clear_has_status();
}
inline ::fantasybit::MyNameStatus MyFantasyName::status() const {
  return static_cast< ::fantasybit::MyNameStatus >(status_);
}
inline void MyFantasyName::set_status(::fantasybit::MyNameStatus value) {
  assert(::fantasybit::MyNameStatus_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional .fantasybit.NameTransaction fantasyname = 3;
inline bool MyFantasyName::has_fantasyname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MyFantasyName::set_has_fantasyname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MyFantasyName::clear_has_fantasyname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MyFantasyName::clear_fantasyname() {
  if (fantasyname_ != NULL) fantasyname_->::fantasybit::NameTransaction::Clear();
  clear_has_fantasyname();
}
inline const ::fantasybit::NameTransaction& MyFantasyName::fantasyname() const {
  return fantasyname_ != NULL ? *fantasyname_ : *default_instance_->fantasyname_;
}
inline ::fantasybit::NameTransaction* MyFantasyName::mutable_fantasyname() {
  set_has_fantasyname();
  if (fantasyname_ == NULL) fantasyname_ = new ::fantasybit::NameTransaction;
  return fantasyname_;
}
inline ::fantasybit::NameTransaction* MyFantasyName::release_fantasyname() {
  clear_has_fantasyname();
  ::fantasybit::NameTransaction* temp = fantasyname_;
  fantasyname_ = NULL;
  return temp;
}
inline void MyFantasyName::set_allocated_fantasyname(::fantasybit::NameTransaction* fantasyname) {
  delete fantasyname_;
  fantasyname_ = fantasyname;
  if (fantasyname) {
    set_has_fantasyname();
  } else {
    clear_has_fantasyname();
  }
}

// -------------------------------------------------------------------

// Secret

// required string private_key = 1;
inline bool Secret::has_private_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Secret::set_has_private_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Secret::clear_has_private_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Secret::clear_private_key() {
  if (private_key_ != &::google::protobuf::internal::kEmptyString) {
    private_key_->clear();
  }
  clear_has_private_key();
}
inline const ::std::string& Secret::private_key() const {
  return *private_key_;
}
inline void Secret::set_private_key(const ::std::string& value) {
  set_has_private_key();
  if (private_key_ == &::google::protobuf::internal::kEmptyString) {
    private_key_ = new ::std::string;
  }
  private_key_->assign(value);
}
inline void Secret::set_private_key(const char* value) {
  set_has_private_key();
  if (private_key_ == &::google::protobuf::internal::kEmptyString) {
    private_key_ = new ::std::string;
  }
  private_key_->assign(value);
}
inline void Secret::set_private_key(const char* value, size_t size) {
  set_has_private_key();
  if (private_key_ == &::google::protobuf::internal::kEmptyString) {
    private_key_ = new ::std::string;
  }
  private_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Secret::mutable_private_key() {
  set_has_private_key();
  if (private_key_ == &::google::protobuf::internal::kEmptyString) {
    private_key_ = new ::std::string;
  }
  return private_key_;
}
inline ::std::string* Secret::release_private_key() {
  clear_has_private_key();
  if (private_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = private_key_;
    private_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Secret::set_allocated_private_key(::std::string* private_key) {
  if (private_key_ != &::google::protobuf::internal::kEmptyString) {
    delete private_key_;
  }
  if (private_key) {
    set_has_private_key();
    private_key_ = private_key;
  } else {
    clear_has_private_key();
    private_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .fantasybit.MyFantasyName myfantasyname = 2;
inline bool Secret::has_myfantasyname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Secret::set_has_myfantasyname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Secret::clear_has_myfantasyname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Secret::clear_myfantasyname() {
  if (myfantasyname_ != NULL) myfantasyname_->::fantasybit::MyFantasyName::Clear();
  clear_has_myfantasyname();
}
inline const ::fantasybit::MyFantasyName& Secret::myfantasyname() const {
  return myfantasyname_ != NULL ? *myfantasyname_ : *default_instance_->myfantasyname_;
}
inline ::fantasybit::MyFantasyName* Secret::mutable_myfantasyname() {
  set_has_myfantasyname();
  if (myfantasyname_ == NULL) myfantasyname_ = new ::fantasybit::MyFantasyName;
  return myfantasyname_;
}
inline ::fantasybit::MyFantasyName* Secret::release_myfantasyname() {
  clear_has_myfantasyname();
  ::fantasybit::MyFantasyName* temp = myfantasyname_;
  myfantasyname_ = NULL;
  return temp;
}
inline void Secret::set_allocated_myfantasyname(::fantasybit::MyFantasyName* myfantasyname) {
  delete myfantasyname_;
  myfantasyname_ = myfantasyname;
  if (myfantasyname) {
    set_has_myfantasyname();
  } else {
    clear_has_myfantasyname();
  }
}

// -------------------------------------------------------------------

// FantasyNameT

// required string public_key = 1;
inline bool FantasyNameT::has_public_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FantasyNameT::set_has_public_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FantasyNameT::clear_has_public_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FantasyNameT::clear_public_key() {
  if (public_key_ != &::google::protobuf::internal::kEmptyString) {
    public_key_->clear();
  }
  clear_has_public_key();
}
inline const ::std::string& FantasyNameT::public_key() const {
  return *public_key_;
}
inline void FantasyNameT::set_public_key(const ::std::string& value) {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::kEmptyString) {
    public_key_ = new ::std::string;
  }
  public_key_->assign(value);
}
inline void FantasyNameT::set_public_key(const char* value) {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::kEmptyString) {
    public_key_ = new ::std::string;
  }
  public_key_->assign(value);
}
inline void FantasyNameT::set_public_key(const char* value, size_t size) {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::kEmptyString) {
    public_key_ = new ::std::string;
  }
  public_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FantasyNameT::mutable_public_key() {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::kEmptyString) {
    public_key_ = new ::std::string;
  }
  return public_key_;
}
inline ::std::string* FantasyNameT::release_public_key() {
  clear_has_public_key();
  if (public_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = public_key_;
    public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FantasyNameT::set_allocated_public_key(::std::string* public_key) {
  if (public_key_ != &::google::protobuf::internal::kEmptyString) {
    delete public_key_;
  }
  if (public_key) {
    set_has_public_key();
    public_key_ = public_key;
  } else {
    clear_has_public_key();
    public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string hash = 2;
inline bool FantasyNameT::has_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FantasyNameT::set_has_hash() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FantasyNameT::clear_has_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FantasyNameT::clear_hash() {
  if (hash_ != &::google::protobuf::internal::kEmptyString) {
    hash_->clear();
  }
  clear_has_hash();
}
inline const ::std::string& FantasyNameT::hash() const {
  return *hash_;
}
inline void FantasyNameT::set_hash(const ::std::string& value) {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    hash_ = new ::std::string;
  }
  hash_->assign(value);
}
inline void FantasyNameT::set_hash(const char* value) {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    hash_ = new ::std::string;
  }
  hash_->assign(value);
}
inline void FantasyNameT::set_hash(const char* value, size_t size) {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    hash_ = new ::std::string;
  }
  hash_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FantasyNameT::mutable_hash() {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    hash_ = new ::std::string;
  }
  return hash_;
}
inline ::std::string* FantasyNameT::release_hash() {
  clear_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hash_;
    hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FantasyNameT::set_allocated_hash(::std::string* hash) {
  if (hash_ != &::google::protobuf::internal::kEmptyString) {
    delete hash_;
  }
  if (hash) {
    set_has_hash();
    hash_ = hash;
  } else {
    clear_has_hash();
    hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .fantasybit.BitStake balances = 3;
inline bool FantasyNameT::has_balances() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FantasyNameT::set_has_balances() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FantasyNameT::clear_has_balances() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FantasyNameT::clear_balances() {
  if (balances_ != NULL) balances_->::fantasybit::BitStake::Clear();
  clear_has_balances();
}
inline const ::fantasybit::BitStake& FantasyNameT::balances() const {
  return balances_ != NULL ? *balances_ : *default_instance_->balances_;
}
inline ::fantasybit::BitStake* FantasyNameT::mutable_balances() {
  set_has_balances();
  if (balances_ == NULL) balances_ = new ::fantasybit::BitStake;
  return balances_;
}
inline ::fantasybit::BitStake* FantasyNameT::release_balances() {
  clear_has_balances();
  ::fantasybit::BitStake* temp = balances_;
  balances_ = NULL;
  return temp;
}
inline void FantasyNameT::set_allocated_balances(::fantasybit::BitStake* balances) {
  delete balances_;
  balances_ = balances;
  if (balances) {
    set_has_balances();
  } else {
    clear_has_balances();
  }
}

// optional string name = 4;
inline bool FantasyNameT::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FantasyNameT::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FantasyNameT::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FantasyNameT::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FantasyNameT::name() const {
  return *name_;
}
inline void FantasyNameT::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FantasyNameT::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FantasyNameT::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FantasyNameT::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FantasyNameT::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FantasyNameT::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// BitStake

// -------------------------------------------------------------------

// NameTransaction

// -------------------------------------------------------------------

// OutData

// required .fantasybit.Type type = 1;
inline bool OutData::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OutData::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OutData::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OutData::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::fantasybit::Type OutData::type() const {
  return static_cast< ::fantasybit::Type >(type_);
}
inline void OutData::set_type(::fantasybit::Type value) {
  assert(::fantasybit::Type_IsValid(value));
  set_has_type();
  type_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fantasybit

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fantasybit::MyNameStatus>() {
  return ::fantasybit::MyNameStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fantasybit::Type>() {
  return ::fantasybit::Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtoData_2eproto__INCLUDED
