// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoData.proto

#ifndef PROTOBUF_ProtoData_2eproto__INCLUDED
#define PROTOBUF_ProtoData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace fantasybit {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProtoData_2eproto();
void protobuf_AssignDesc_ProtoData_2eproto();
void protobuf_ShutdownFile_ProtoData_2eproto();

class MyFantasyName;
class Secret;
class FantasyNameT;
class BitStake;
class NameTransaction;
class OutData;
class InData;
class NameProof;
class NamePOW;
class TweetProof;
class Transaction;
class NameTrans;
class SignedTransaction;
class BlockHeader;
class SignedBlockHeader;
class Block;
class NodeRequest;
class NodeReply;
class FantasyPlayerPoints;
class ProjectionTrans;
class Data;
class PlayerData;
class TeamData;
class ResultData;
class DataTransition;

enum OutData_Type {
  OutData_Type_MYFANTASYNAME = 1,
  OutData_Type_SNAPSHOT = 2,
  OutData_Type_HEARTBEAT = 3
};
bool OutData_Type_IsValid(int value);
const OutData_Type OutData_Type_Type_MIN = OutData_Type_MYFANTASYNAME;
const OutData_Type OutData_Type_Type_MAX = OutData_Type_HEARTBEAT;
const int OutData_Type_Type_ARRAYSIZE = OutData_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* OutData_Type_descriptor();
inline const ::std::string& OutData_Type_Name(OutData_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    OutData_Type_descriptor(), value);
}
inline bool OutData_Type_Parse(
    const ::std::string& name, OutData_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OutData_Type>(
    OutData_Type_descriptor(), name, value);
}
enum InData_Type {
  InData_Type_MINENAME = 1,
  InData_Type_QUIT = 2,
  InData_Type_HEARTBEAT = 3,
  InData_Type_CONNECT = 4,
  InData_Type_MAKE_BLOCK = 5,
  InData_Type_NEWNAME = 6,
  InData_Type_PROJ = 7,
  InData_Type_RESULT = 8
};
bool InData_Type_IsValid(int value);
const InData_Type InData_Type_Type_MIN = InData_Type_MINENAME;
const InData_Type InData_Type_Type_MAX = InData_Type_RESULT;
const int InData_Type_Type_ARRAYSIZE = InData_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* InData_Type_descriptor();
inline const ::std::string& InData_Type_Name(InData_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    InData_Type_descriptor(), value);
}
inline bool InData_Type_Parse(
    const ::std::string& name, InData_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<InData_Type>(
    InData_Type_descriptor(), name, value);
}
enum NameProof_Type {
  NameProof_Type_POW = 1,
  NameProof_Type_TWEET = 2,
  NameProof_Type_ORACLE = 3
};
bool NameProof_Type_IsValid(int value);
const NameProof_Type NameProof_Type_Type_MIN = NameProof_Type_POW;
const NameProof_Type NameProof_Type_Type_MAX = NameProof_Type_ORACLE;
const int NameProof_Type_Type_ARRAYSIZE = NameProof_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* NameProof_Type_descriptor();
inline const ::std::string& NameProof_Type_Name(NameProof_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    NameProof_Type_descriptor(), value);
}
inline bool NameProof_Type_Parse(
    const ::std::string& name, NameProof_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NameProof_Type>(
    NameProof_Type_descriptor(), name, value);
}
enum BlockHeader_Type {
  BlockHeader_Type_NORMAL = 1,
  BlockHeader_Type_DATA = 2
};
bool BlockHeader_Type_IsValid(int value);
const BlockHeader_Type BlockHeader_Type_Type_MIN = BlockHeader_Type_NORMAL;
const BlockHeader_Type BlockHeader_Type_Type_MAX = BlockHeader_Type_DATA;
const int BlockHeader_Type_Type_ARRAYSIZE = BlockHeader_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* BlockHeader_Type_descriptor();
inline const ::std::string& BlockHeader_Type_Name(BlockHeader_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    BlockHeader_Type_descriptor(), value);
}
inline bool BlockHeader_Type_Parse(
    const ::std::string& name, BlockHeader_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BlockHeader_Type>(
    BlockHeader_Type_descriptor(), name, value);
}
enum NodeRequest_Type {
  NodeRequest_Type_HANDSHAKE = 1,
  NodeRequest_Type_BLOCK_REQUEST = 2,
  NodeRequest_Type_HIGHT_REQUEST = 3
};
bool NodeRequest_Type_IsValid(int value);
const NodeRequest_Type NodeRequest_Type_Type_MIN = NodeRequest_Type_HANDSHAKE;
const NodeRequest_Type NodeRequest_Type_Type_MAX = NodeRequest_Type_HIGHT_REQUEST;
const int NodeRequest_Type_Type_ARRAYSIZE = NodeRequest_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* NodeRequest_Type_descriptor();
inline const ::std::string& NodeRequest_Type_Name(NodeRequest_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    NodeRequest_Type_descriptor(), value);
}
inline bool NodeRequest_Type_Parse(
    const ::std::string& name, NodeRequest_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NodeRequest_Type>(
    NodeRequest_Type_descriptor(), name, value);
}
enum DataTransition_Type {
  DataTransition_Type_ROSTER = 1,
  DataTransition_Type_SEASONSTART = 2,
  DataTransition_Type_SEASONEND = 3,
  DataTransition_Type_DRAFTOVER = 4,
  DataTransition_Type_HEARTBEAT = 5,
  DataTransition_Type_GAMESTART = 6,
  DataTransition_Type_WEEKOVER = 7
};
bool DataTransition_Type_IsValid(int value);
const DataTransition_Type DataTransition_Type_Type_MIN = DataTransition_Type_ROSTER;
const DataTransition_Type DataTransition_Type_Type_MAX = DataTransition_Type_WEEKOVER;
const int DataTransition_Type_Type_ARRAYSIZE = DataTransition_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataTransition_Type_descriptor();
inline const ::std::string& DataTransition_Type_Name(DataTransition_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataTransition_Type_descriptor(), value);
}
inline bool DataTransition_Type_Parse(
    const ::std::string& name, DataTransition_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataTransition_Type>(
    DataTransition_Type_descriptor(), name, value);
}
enum MyNameStatus {
  none = 1,
  notavil = 2,
  requested = 5,
  found = 10,
  transaction_sent = 15,
  confirmed = 20
};
bool MyNameStatus_IsValid(int value);
const MyNameStatus MyNameStatus_MIN = none;
const MyNameStatus MyNameStatus_MAX = confirmed;
const int MyNameStatus_ARRAYSIZE = MyNameStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* MyNameStatus_descriptor();
inline const ::std::string& MyNameStatus_Name(MyNameStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    MyNameStatus_descriptor(), value);
}
inline bool MyNameStatus_Parse(
    const ::std::string& name, MyNameStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MyNameStatus>(
    MyNameStatus_descriptor(), name, value);
}
enum TransType {
  NAME = 0,
  PROJECTION = 1,
  RESULT = 2
};
bool TransType_IsValid(int value);
const TransType TransType_MIN = NAME;
const TransType TransType_MAX = RESULT;
const int TransType_ARRAYSIZE = TransType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TransType_descriptor();
inline const ::std::string& TransType_Name(TransType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TransType_descriptor(), value);
}
inline bool TransType_Parse(
    const ::std::string& name, TransType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TransType>(
    TransType_descriptor(), name, value);
}
enum DataType {
  SCHEDULE = 0,
  PLAYER = 1,
  TEAM = 2
};
bool DataType_IsValid(int value);
const DataType DataType_MIN = SCHEDULE;
const DataType DataType_MAX = TEAM;
const int DataType_ARRAYSIZE = DataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataType_descriptor();
inline const ::std::string& DataType_Name(DataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataType_descriptor(), value);
}
inline bool DataType_Parse(
    const ::std::string& name, DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataType>(
    DataType_descriptor(), name, value);
}
// ===================================================================

class MyFantasyName : public ::google::protobuf::Message {
 public:
  MyFantasyName();
  virtual ~MyFantasyName();

  MyFantasyName(const MyFantasyName& from);

  inline MyFantasyName& operator=(const MyFantasyName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MyFantasyName& default_instance();

  void Swap(MyFantasyName* other);

  // implements Message ----------------------------------------------

  MyFantasyName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MyFantasyName& from);
  void MergeFrom(const MyFantasyName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required .fantasybit.MyNameStatus status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::fantasybit::MyNameStatus status() const;
  inline void set_status(::fantasybit::MyNameStatus value);

  // optional .fantasybit.NameTransaction nametransaction = 3;
  inline bool has_nametransaction() const;
  inline void clear_nametransaction();
  static const int kNametransactionFieldNumber = 3;
  inline const ::fantasybit::NameTransaction& nametransaction() const;
  inline ::fantasybit::NameTransaction* mutable_nametransaction();
  inline ::fantasybit::NameTransaction* release_nametransaction();
  inline void set_allocated_nametransaction(::fantasybit::NameTransaction* nametransaction);

  // @@protoc_insertion_point(class_scope:fantasybit.MyFantasyName)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_nametransaction();
  inline void clear_has_nametransaction();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::fantasybit::NameTransaction* nametransaction_;
  int status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static MyFantasyName* default_instance_;
};
// -------------------------------------------------------------------

class Secret : public ::google::protobuf::Message {
 public:
  Secret();
  virtual ~Secret();

  Secret(const Secret& from);

  inline Secret& operator=(const Secret& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Secret& default_instance();

  void Swap(Secret* other);

  // implements Message ----------------------------------------------

  Secret* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Secret& from);
  void MergeFrom(const Secret& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string private_key = 1;
  inline bool has_private_key() const;
  inline void clear_private_key();
  static const int kPrivateKeyFieldNumber = 1;
  inline const ::std::string& private_key() const;
  inline void set_private_key(const ::std::string& value);
  inline void set_private_key(const char* value);
  inline void set_private_key(const char* value, size_t size);
  inline ::std::string* mutable_private_key();
  inline ::std::string* release_private_key();
  inline void set_allocated_private_key(::std::string* private_key);

  // optional .fantasybit.MyFantasyName myfantasyname = 2;
  inline bool has_myfantasyname() const;
  inline void clear_myfantasyname();
  static const int kMyfantasynameFieldNumber = 2;
  inline const ::fantasybit::MyFantasyName& myfantasyname() const;
  inline ::fantasybit::MyFantasyName* mutable_myfantasyname();
  inline ::fantasybit::MyFantasyName* release_myfantasyname();
  inline void set_allocated_myfantasyname(::fantasybit::MyFantasyName* myfantasyname);

  // @@protoc_insertion_point(class_scope:fantasybit.Secret)
 private:
  inline void set_has_private_key();
  inline void clear_has_private_key();
  inline void set_has_myfantasyname();
  inline void clear_has_myfantasyname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* private_key_;
  ::fantasybit::MyFantasyName* myfantasyname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static Secret* default_instance_;
};
// -------------------------------------------------------------------

class FantasyNameT : public ::google::protobuf::Message {
 public:
  FantasyNameT();
  virtual ~FantasyNameT();

  FantasyNameT(const FantasyNameT& from);

  inline FantasyNameT& operator=(const FantasyNameT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FantasyNameT& default_instance();

  void Swap(FantasyNameT* other);

  // implements Message ----------------------------------------------

  FantasyNameT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FantasyNameT& from);
  void MergeFrom(const FantasyNameT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string public_key = 1;
  inline bool has_public_key() const;
  inline void clear_public_key();
  static const int kPublicKeyFieldNumber = 1;
  inline const ::std::string& public_key() const;
  inline void set_public_key(const ::std::string& value);
  inline void set_public_key(const char* value);
  inline void set_public_key(const char* value, size_t size);
  inline ::std::string* mutable_public_key();
  inline ::std::string* release_public_key();
  inline void set_allocated_public_key(::std::string* public_key);

  // required string hash = 2;
  inline bool has_hash() const;
  inline void clear_hash();
  static const int kHashFieldNumber = 2;
  inline const ::std::string& hash() const;
  inline void set_hash(const ::std::string& value);
  inline void set_hash(const char* value);
  inline void set_hash(const char* value, size_t size);
  inline ::std::string* mutable_hash();
  inline ::std::string* release_hash();
  inline void set_allocated_hash(::std::string* hash);

  // required .fantasybit.BitStake balances = 3;
  inline bool has_balances() const;
  inline void clear_balances();
  static const int kBalancesFieldNumber = 3;
  inline const ::fantasybit::BitStake& balances() const;
  inline ::fantasybit::BitStake* mutable_balances();
  inline ::fantasybit::BitStake* release_balances();
  inline void set_allocated_balances(::fantasybit::BitStake* balances);

  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:fantasybit.FantasyNameT)
 private:
  inline void set_has_public_key();
  inline void clear_has_public_key();
  inline void set_has_hash();
  inline void clear_has_hash();
  inline void set_has_balances();
  inline void clear_has_balances();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* public_key_;
  ::std::string* hash_;
  ::fantasybit::BitStake* balances_;
  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static FantasyNameT* default_instance_;
};
// -------------------------------------------------------------------

class BitStake : public ::google::protobuf::Message {
 public:
  BitStake();
  virtual ~BitStake();

  BitStake(const BitStake& from);

  inline BitStake& operator=(const BitStake& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BitStake& default_instance();

  void Swap(BitStake* other);

  // implements Message ----------------------------------------------

  BitStake* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BitStake& from);
  void MergeFrom(const BitStake& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:fantasybit.BitStake)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static BitStake* default_instance_;
};
// -------------------------------------------------------------------

class NameTransaction : public ::google::protobuf::Message {
 public:
  NameTransaction();
  virtual ~NameTransaction();

  NameTransaction(const NameTransaction& from);

  inline NameTransaction& operator=(const NameTransaction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NameTransaction& default_instance();

  void Swap(NameTransaction* other);

  // implements Message ----------------------------------------------

  NameTransaction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NameTransaction& from);
  void MergeFrom(const NameTransaction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 hash = 1;
  inline bool has_hash() const;
  inline void clear_hash();
  static const int kHashFieldNumber = 1;
  inline ::google::protobuf::uint64 hash() const;
  inline void set_hash(::google::protobuf::uint64 value);

  // required bytes public_key = 2;
  inline bool has_public_key() const;
  inline void clear_public_key();
  static const int kPublicKeyFieldNumber = 2;
  inline const ::std::string& public_key() const;
  inline void set_public_key(const ::std::string& value);
  inline void set_public_key(const char* value);
  inline void set_public_key(const void* value, size_t size);
  inline ::std::string* mutable_public_key();
  inline ::std::string* release_public_key();
  inline void set_allocated_public_key(::std::string* public_key);

  // required uint32 nonce = 3;
  inline bool has_nonce() const;
  inline void clear_nonce();
  static const int kNonceFieldNumber = 3;
  inline ::google::protobuf::uint32 nonce() const;
  inline void set_nonce(::google::protobuf::uint32 value);

  // required uint32 utc_sec = 4;
  inline bool has_utc_sec() const;
  inline void clear_utc_sec();
  static const int kUtcSecFieldNumber = 4;
  inline ::google::protobuf::uint32 utc_sec() const;
  inline void set_utc_sec(::google::protobuf::uint32 value);

  // required string prev_id = 5;
  inline bool has_prev_id() const;
  inline void clear_prev_id();
  static const int kPrevIdFieldNumber = 5;
  inline const ::std::string& prev_id() const;
  inline void set_prev_id(const ::std::string& value);
  inline void set_prev_id(const char* value);
  inline void set_prev_id(const char* value, size_t size);
  inline ::std::string* mutable_prev_id();
  inline ::std::string* release_prev_id();
  inline void set_allocated_prev_id(::std::string* prev_id);

  // optional bytes sig = 6;
  inline bool has_sig() const;
  inline void clear_sig();
  static const int kSigFieldNumber = 6;
  inline const ::std::string& sig() const;
  inline void set_sig(const ::std::string& value);
  inline void set_sig(const char* value);
  inline void set_sig(const void* value, size_t size);
  inline ::std::string* mutable_sig();
  inline ::std::string* release_sig();
  inline void set_allocated_sig(::std::string* sig);

  // optional string sigid = 7;
  inline bool has_sigid() const;
  inline void clear_sigid();
  static const int kSigidFieldNumber = 7;
  inline const ::std::string& sigid() const;
  inline void set_sigid(const ::std::string& value);
  inline void set_sigid(const char* value);
  inline void set_sigid(const char* value, size_t size);
  inline ::std::string* mutable_sigid();
  inline ::std::string* release_sigid();
  inline void set_allocated_sigid(::std::string* sigid);

  // @@protoc_insertion_point(class_scope:fantasybit.NameTransaction)
 private:
  inline void set_has_hash();
  inline void clear_has_hash();
  inline void set_has_public_key();
  inline void clear_has_public_key();
  inline void set_has_nonce();
  inline void clear_has_nonce();
  inline void set_has_utc_sec();
  inline void clear_has_utc_sec();
  inline void set_has_prev_id();
  inline void clear_has_prev_id();
  inline void set_has_sig();
  inline void clear_has_sig();
  inline void set_has_sigid();
  inline void clear_has_sigid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 hash_;
  ::std::string* public_key_;
  ::google::protobuf::uint32 nonce_;
  ::google::protobuf::uint32 utc_sec_;
  ::std::string* prev_id_;
  ::std::string* sig_;
  ::std::string* sigid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static NameTransaction* default_instance_;
};
// -------------------------------------------------------------------

class OutData : public ::google::protobuf::Message {
 public:
  OutData();
  virtual ~OutData();

  OutData(const OutData& from);

  inline OutData& operator=(const OutData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OutData& default_instance();

  void Swap(OutData* other);

  // implements Message ----------------------------------------------

  OutData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OutData& from);
  void MergeFrom(const OutData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef OutData_Type Type;
  static const Type MYFANTASYNAME = OutData_Type_MYFANTASYNAME;
  static const Type SNAPSHOT = OutData_Type_SNAPSHOT;
  static const Type HEARTBEAT = OutData_Type_HEARTBEAT;
  static inline bool Type_IsValid(int value) {
    return OutData_Type_IsValid(value);
  }
  static const Type Type_MIN =
    OutData_Type_Type_MIN;
  static const Type Type_MAX =
    OutData_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    OutData_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return OutData_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return OutData_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return OutData_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .fantasybit.OutData.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::fantasybit::OutData_Type type() const;
  inline void set_type(::fantasybit::OutData_Type value);

  // optional .fantasybit.MyFantasyName myfantasyname = 2;
  inline bool has_myfantasyname() const;
  inline void clear_myfantasyname();
  static const int kMyfantasynameFieldNumber = 2;
  inline const ::fantasybit::MyFantasyName& myfantasyname() const;
  inline ::fantasybit::MyFantasyName* mutable_myfantasyname();
  inline ::fantasybit::MyFantasyName* release_myfantasyname();
  inline void set_allocated_myfantasyname(::fantasybit::MyFantasyName* myfantasyname);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(OutData)
  // @@protoc_insertion_point(class_scope:fantasybit.OutData)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_myfantasyname();
  inline void clear_has_myfantasyname();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::fantasybit::MyFantasyName* myfantasyname_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static OutData* default_instance_;
};
// -------------------------------------------------------------------

class InData : public ::google::protobuf::Message {
 public:
  InData();
  virtual ~InData();

  InData(const InData& from);

  inline InData& operator=(const InData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InData& default_instance();

  void Swap(InData* other);

  // implements Message ----------------------------------------------

  InData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InData& from);
  void MergeFrom(const InData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef InData_Type Type;
  static const Type MINENAME = InData_Type_MINENAME;
  static const Type QUIT = InData_Type_QUIT;
  static const Type HEARTBEAT = InData_Type_HEARTBEAT;
  static const Type CONNECT = InData_Type_CONNECT;
  static const Type MAKE_BLOCK = InData_Type_MAKE_BLOCK;
  static const Type NEWNAME = InData_Type_NEWNAME;
  static const Type PROJ = InData_Type_PROJ;
  static const Type RESULT = InData_Type_RESULT;
  static inline bool Type_IsValid(int value) {
    return InData_Type_IsValid(value);
  }
  static const Type Type_MIN =
    InData_Type_Type_MIN;
  static const Type Type_MAX =
    InData_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    InData_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return InData_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return InData_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return InData_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .fantasybit.InData.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::fantasybit::InData_Type type() const;
  inline void set_type(::fantasybit::InData_Type value);

  // optional string data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const char* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional string data2 = 3;
  inline bool has_data2() const;
  inline void clear_data2();
  static const int kData2FieldNumber = 3;
  inline const ::std::string& data2() const;
  inline void set_data2(const ::std::string& value);
  inline void set_data2(const char* value);
  inline void set_data2(const char* value, size_t size);
  inline ::std::string* mutable_data2();
  inline ::std::string* release_data2();
  inline void set_allocated_data2(::std::string* data2);

  // optional int32 num = 4;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 4;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(InData)
  // @@protoc_insertion_point(class_scope:fantasybit.InData)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_data2();
  inline void clear_has_data2();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* data_;
  int type_;
  ::google::protobuf::int32 num_;
  ::std::string* data2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static InData* default_instance_;
};
// -------------------------------------------------------------------

class NameProof : public ::google::protobuf::Message {
 public:
  NameProof();
  virtual ~NameProof();

  NameProof(const NameProof& from);

  inline NameProof& operator=(const NameProof& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NameProof& default_instance();

  void Swap(NameProof* other);

  // implements Message ----------------------------------------------

  NameProof* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NameProof& from);
  void MergeFrom(const NameProof& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef NameProof_Type Type;
  static const Type POW = NameProof_Type_POW;
  static const Type TWEET = NameProof_Type_TWEET;
  static const Type ORACLE = NameProof_Type_ORACLE;
  static inline bool Type_IsValid(int value) {
    return NameProof_Type_IsValid(value);
  }
  static const Type Type_MIN =
    NameProof_Type_Type_MIN;
  static const Type Type_MAX =
    NameProof_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    NameProof_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return NameProof_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return NameProof_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return NameProof_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .fantasybit.NameProof.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::fantasybit::NameProof_Type type() const;
  inline void set_type(::fantasybit::NameProof_Type value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(NameProof)
  // @@protoc_insertion_point(class_scope:fantasybit.NameProof)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static NameProof* default_instance_;
};
// -------------------------------------------------------------------

class NamePOW : public ::google::protobuf::Message {
 public:
  NamePOW();
  virtual ~NamePOW();

  NamePOW(const NamePOW& from);

  inline NamePOW& operator=(const NamePOW& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NamePOW& default_instance();

  void Swap(NamePOW* other);

  // implements Message ----------------------------------------------

  NamePOW* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NamePOW& from);
  void MergeFrom(const NamePOW& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 hash = 1;
  inline bool has_hash() const;
  inline void clear_hash();
  static const int kHashFieldNumber = 1;
  inline ::google::protobuf::uint64 hash() const;
  inline void set_hash(::google::protobuf::uint64 value);

  // optional bytes public_key = 2;
  inline bool has_public_key() const;
  inline void clear_public_key();
  static const int kPublicKeyFieldNumber = 2;
  inline const ::std::string& public_key() const;
  inline void set_public_key(const ::std::string& value);
  inline void set_public_key(const char* value);
  inline void set_public_key(const void* value, size_t size);
  inline ::std::string* mutable_public_key();
  inline ::std::string* release_public_key();
  inline void set_allocated_public_key(::std::string* public_key);

  // optional uint32 nonce = 3;
  inline bool has_nonce() const;
  inline void clear_nonce();
  static const int kNonceFieldNumber = 3;
  inline ::google::protobuf::uint32 nonce() const;
  inline void set_nonce(::google::protobuf::uint32 value);

  // optional uint32 utc_sec = 4;
  inline bool has_utc_sec() const;
  inline void clear_utc_sec();
  static const int kUtcSecFieldNumber = 4;
  inline ::google::protobuf::uint32 utc_sec() const;
  inline void set_utc_sec(::google::protobuf::uint32 value);

  // optional string prev_id = 5;
  inline bool has_prev_id() const;
  inline void clear_prev_id();
  static const int kPrevIdFieldNumber = 5;
  inline const ::std::string& prev_id() const;
  inline void set_prev_id(const ::std::string& value);
  inline void set_prev_id(const char* value);
  inline void set_prev_id(const char* value, size_t size);
  inline ::std::string* mutable_prev_id();
  inline ::std::string* release_prev_id();
  inline void set_allocated_prev_id(::std::string* prev_id);

  // optional bytes sig = 6;
  inline bool has_sig() const;
  inline void clear_sig();
  static const int kSigFieldNumber = 6;
  inline const ::std::string& sig() const;
  inline void set_sig(const ::std::string& value);
  inline void set_sig(const char* value);
  inline void set_sig(const void* value, size_t size);
  inline ::std::string* mutable_sig();
  inline ::std::string* release_sig();
  inline void set_allocated_sig(::std::string* sig);

  // optional string sigid = 7;
  inline bool has_sigid() const;
  inline void clear_sigid();
  static const int kSigidFieldNumber = 7;
  inline const ::std::string& sigid() const;
  inline void set_sigid(const ::std::string& value);
  inline void set_sigid(const char* value);
  inline void set_sigid(const char* value, size_t size);
  inline ::std::string* mutable_sigid();
  inline ::std::string* release_sigid();
  inline void set_allocated_sigid(::std::string* sigid);

  static const int kNamePowFieldNumber = 200;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::NameProof,
      ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::NamePOW >, 11, false >
    name_pow;
  // @@protoc_insertion_point(class_scope:fantasybit.NamePOW)
 private:
  inline void set_has_hash();
  inline void clear_has_hash();
  inline void set_has_public_key();
  inline void clear_has_public_key();
  inline void set_has_nonce();
  inline void clear_has_nonce();
  inline void set_has_utc_sec();
  inline void clear_has_utc_sec();
  inline void set_has_prev_id();
  inline void clear_has_prev_id();
  inline void set_has_sig();
  inline void clear_has_sig();
  inline void set_has_sigid();
  inline void clear_has_sigid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 hash_;
  ::std::string* public_key_;
  ::google::protobuf::uint32 nonce_;
  ::google::protobuf::uint32 utc_sec_;
  ::std::string* prev_id_;
  ::std::string* sig_;
  ::std::string* sigid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static NamePOW* default_instance_;
};
// -------------------------------------------------------------------

class TweetProof : public ::google::protobuf::Message {
 public:
  TweetProof();
  virtual ~TweetProof();

  TweetProof(const TweetProof& from);

  inline TweetProof& operator=(const TweetProof& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TweetProof& default_instance();

  void Swap(TweetProof* other);

  // implements Message ----------------------------------------------

  TweetProof* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TweetProof& from);
  void MergeFrom(const TweetProof& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tweet = 10;
  inline bool has_tweet() const;
  inline void clear_tweet();
  static const int kTweetFieldNumber = 10;
  inline const ::std::string& tweet() const;
  inline void set_tweet(const ::std::string& value);
  inline void set_tweet(const char* value);
  inline void set_tweet(const char* value, size_t size);
  inline ::std::string* mutable_tweet();
  inline ::std::string* release_tweet();
  inline void set_allocated_tweet(::std::string* tweet);

  static const int kTweetProofFieldNumber = 201;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::NameProof,
      ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::TweetProof >, 11, false >
    tweet_proof;
  // @@protoc_insertion_point(class_scope:fantasybit.TweetProof)
 private:
  inline void set_has_tweet();
  inline void clear_has_tweet();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tweet_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static TweetProof* default_instance_;
};
// -------------------------------------------------------------------

class Transaction : public ::google::protobuf::Message {
 public:
  Transaction();
  virtual ~Transaction();

  Transaction(const Transaction& from);

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transaction& default_instance();

  void Swap(Transaction* other);

  // implements Message ----------------------------------------------

  Transaction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Transaction& from);
  void MergeFrom(const Transaction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // optional .fantasybit.TransType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::fantasybit::TransType type() const;
  inline void set_type(::fantasybit::TransType value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Transaction)
  // @@protoc_insertion_point(class_scope:fantasybit.Transaction)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 version_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static Transaction* default_instance_;
};
// -------------------------------------------------------------------

class NameTrans : public ::google::protobuf::Message {
 public:
  NameTrans();
  virtual ~NameTrans();

  NameTrans(const NameTrans& from);

  inline NameTrans& operator=(const NameTrans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NameTrans& default_instance();

  void Swap(NameTrans* other);

  // implements Message ----------------------------------------------

  NameTrans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NameTrans& from);
  void MergeFrom(const NameTrans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string fantasy_name = 10;
  inline bool has_fantasy_name() const;
  inline void clear_fantasy_name();
  static const int kFantasyNameFieldNumber = 10;
  inline const ::std::string& fantasy_name() const;
  inline void set_fantasy_name(const ::std::string& value);
  inline void set_fantasy_name(const char* value);
  inline void set_fantasy_name(const char* value, size_t size);
  inline ::std::string* mutable_fantasy_name();
  inline ::std::string* release_fantasy_name();
  inline void set_allocated_fantasy_name(::std::string* fantasy_name);

  // optional bytes public_key = 20;
  inline bool has_public_key() const;
  inline void clear_public_key();
  static const int kPublicKeyFieldNumber = 20;
  inline const ::std::string& public_key() const;
  inline void set_public_key(const ::std::string& value);
  inline void set_public_key(const char* value);
  inline void set_public_key(const void* value, size_t size);
  inline ::std::string* mutable_public_key();
  inline ::std::string* release_public_key();
  inline void set_allocated_public_key(::std::string* public_key);

  // optional .fantasybit.NameProof proof = 30;
  inline bool has_proof() const;
  inline void clear_proof();
  static const int kProofFieldNumber = 30;
  inline const ::fantasybit::NameProof& proof() const;
  inline ::fantasybit::NameProof* mutable_proof();
  inline ::fantasybit::NameProof* release_proof();
  inline void set_allocated_proof(::fantasybit::NameProof* proof);

  static const int kNameTransFieldNumber = 200;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Transaction,
      ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::NameTrans >, 11, false >
    name_trans;
  // @@protoc_insertion_point(class_scope:fantasybit.NameTrans)
 private:
  inline void set_has_fantasy_name();
  inline void clear_has_fantasy_name();
  inline void set_has_public_key();
  inline void clear_has_public_key();
  inline void set_has_proof();
  inline void clear_has_proof();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* fantasy_name_;
  ::std::string* public_key_;
  ::fantasybit::NameProof* proof_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static NameTrans* default_instance_;
};
// -------------------------------------------------------------------

class SignedTransaction : public ::google::protobuf::Message {
 public:
  SignedTransaction();
  virtual ~SignedTransaction();

  SignedTransaction(const SignedTransaction& from);

  inline SignedTransaction& operator=(const SignedTransaction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignedTransaction& default_instance();

  void Swap(SignedTransaction* other);

  // implements Message ----------------------------------------------

  SignedTransaction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SignedTransaction& from);
  void MergeFrom(const SignedTransaction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fantasybit.Transaction trans = 10;
  inline bool has_trans() const;
  inline void clear_trans();
  static const int kTransFieldNumber = 10;
  inline const ::fantasybit::Transaction& trans() const;
  inline ::fantasybit::Transaction* mutable_trans();
  inline ::fantasybit::Transaction* release_trans();
  inline void set_allocated_trans(::fantasybit::Transaction* trans);

  // optional bytes id = 20;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 20;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const void* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional bytes sig = 30;
  inline bool has_sig() const;
  inline void clear_sig();
  static const int kSigFieldNumber = 30;
  inline const ::std::string& sig() const;
  inline void set_sig(const ::std::string& value);
  inline void set_sig(const char* value);
  inline void set_sig(const void* value, size_t size);
  inline ::std::string* mutable_sig();
  inline ::std::string* release_sig();
  inline void set_allocated_sig(::std::string* sig);

  // optional string fantasy_name = 40;
  inline bool has_fantasy_name() const;
  inline void clear_fantasy_name();
  static const int kFantasyNameFieldNumber = 40;
  inline const ::std::string& fantasy_name() const;
  inline void set_fantasy_name(const ::std::string& value);
  inline void set_fantasy_name(const char* value);
  inline void set_fantasy_name(const char* value, size_t size);
  inline ::std::string* mutable_fantasy_name();
  inline ::std::string* release_fantasy_name();
  inline void set_allocated_fantasy_name(::std::string* fantasy_name);

  // @@protoc_insertion_point(class_scope:fantasybit.SignedTransaction)
 private:
  inline void set_has_trans();
  inline void clear_has_trans();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_sig();
  inline void clear_has_sig();
  inline void set_has_fantasy_name();
  inline void clear_has_fantasy_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::fantasybit::Transaction* trans_;
  ::std::string* id_;
  ::std::string* sig_;
  ::std::string* fantasy_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static SignedTransaction* default_instance_;
};
// -------------------------------------------------------------------

class BlockHeader : public ::google::protobuf::Message {
 public:
  BlockHeader();
  virtual ~BlockHeader();

  BlockHeader(const BlockHeader& from);

  inline BlockHeader& operator=(const BlockHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockHeader& default_instance();

  void Swap(BlockHeader* other);

  // implements Message ----------------------------------------------

  BlockHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockHeader& from);
  void MergeFrom(const BlockHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BlockHeader_Type Type;
  static const Type NORMAL = BlockHeader_Type_NORMAL;
  static const Type DATA = BlockHeader_Type_DATA;
  static inline bool Type_IsValid(int value) {
    return BlockHeader_Type_IsValid(value);
  }
  static const Type Type_MIN =
    BlockHeader_Type_Type_MIN;
  static const Type Type_MAX =
    BlockHeader_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    BlockHeader_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return BlockHeader_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return BlockHeader_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return BlockHeader_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // optional int32 num = 10;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 10;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional bytes prev_id = 20;
  inline bool has_prev_id() const;
  inline void clear_prev_id();
  static const int kPrevIdFieldNumber = 20;
  inline const ::std::string& prev_id() const;
  inline void set_prev_id(const ::std::string& value);
  inline void set_prev_id(const char* value);
  inline void set_prev_id(const void* value, size_t size);
  inline ::std::string* mutable_prev_id();
  inline ::std::string* release_prev_id();
  inline void set_allocated_prev_id(::std::string* prev_id);

  // optional int32 timestamp = 21;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 21;
  inline ::google::protobuf::int32 timestamp() const;
  inline void set_timestamp(::google::protobuf::int32 value);

  // optional bytes generator_pk = 30;
  inline bool has_generator_pk() const;
  inline void clear_generator_pk();
  static const int kGeneratorPkFieldNumber = 30;
  inline const ::std::string& generator_pk() const;
  inline void set_generator_pk(const ::std::string& value);
  inline void set_generator_pk(const char* value);
  inline void set_generator_pk(const void* value, size_t size);
  inline ::std::string* mutable_generator_pk();
  inline ::std::string* release_generator_pk();
  inline void set_allocated_generator_pk(::std::string* generator_pk);

  // optional bytes generating_sig = 40;
  inline bool has_generating_sig() const;
  inline void clear_generating_sig();
  static const int kGeneratingSigFieldNumber = 40;
  inline const ::std::string& generating_sig() const;
  inline void set_generating_sig(const ::std::string& value);
  inline void set_generating_sig(const char* value);
  inline void set_generating_sig(const void* value, size_t size);
  inline ::std::string* mutable_generating_sig();
  inline ::std::string* release_generating_sig();
  inline void set_allocated_generating_sig(::std::string* generating_sig);

  // optional int32 basetarget = 50;
  inline bool has_basetarget() const;
  inline void clear_basetarget();
  static const int kBasetargetFieldNumber = 50;
  inline ::google::protobuf::int32 basetarget() const;
  inline void set_basetarget(::google::protobuf::int32 value);

  // optional .fantasybit.BlockHeader.Type blocktype = 60;
  inline bool has_blocktype() const;
  inline void clear_blocktype();
  static const int kBlocktypeFieldNumber = 60;
  inline ::fantasybit::BlockHeader_Type blocktype() const;
  inline void set_blocktype(::fantasybit::BlockHeader_Type value);

  // optional bytes transaction_id = 70;
  inline bool has_transaction_id() const;
  inline void clear_transaction_id();
  static const int kTransactionIdFieldNumber = 70;
  inline const ::std::string& transaction_id() const;
  inline void set_transaction_id(const ::std::string& value);
  inline void set_transaction_id(const char* value);
  inline void set_transaction_id(const void* value, size_t size);
  inline ::std::string* mutable_transaction_id();
  inline ::std::string* release_transaction_id();
  inline void set_allocated_transaction_id(::std::string* transaction_id);

  // @@protoc_insertion_point(class_scope:fantasybit.BlockHeader)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_prev_id();
  inline void clear_has_prev_id();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_generator_pk();
  inline void clear_has_generator_pk();
  inline void set_has_generating_sig();
  inline void clear_has_generating_sig();
  inline void set_has_basetarget();
  inline void clear_has_basetarget();
  inline void set_has_blocktype();
  inline void clear_has_blocktype();
  inline void set_has_transaction_id();
  inline void clear_has_transaction_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 version_;
  ::google::protobuf::int32 num_;
  ::std::string* prev_id_;
  ::std::string* generator_pk_;
  ::google::protobuf::int32 timestamp_;
  ::google::protobuf::int32 basetarget_;
  ::std::string* generating_sig_;
  ::std::string* transaction_id_;
  int blocktype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static BlockHeader* default_instance_;
};
// -------------------------------------------------------------------

class SignedBlockHeader : public ::google::protobuf::Message {
 public:
  SignedBlockHeader();
  virtual ~SignedBlockHeader();

  SignedBlockHeader(const SignedBlockHeader& from);

  inline SignedBlockHeader& operator=(const SignedBlockHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignedBlockHeader& default_instance();

  void Swap(SignedBlockHeader* other);

  // implements Message ----------------------------------------------

  SignedBlockHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SignedBlockHeader& from);
  void MergeFrom(const SignedBlockHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fantasybit.BlockHeader head = 10;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 10;
  inline const ::fantasybit::BlockHeader& head() const;
  inline ::fantasybit::BlockHeader* mutable_head();
  inline ::fantasybit::BlockHeader* release_head();
  inline void set_allocated_head(::fantasybit::BlockHeader* head);

  // optional string sig = 30;
  inline bool has_sig() const;
  inline void clear_sig();
  static const int kSigFieldNumber = 30;
  inline const ::std::string& sig() const;
  inline void set_sig(const ::std::string& value);
  inline void set_sig(const char* value);
  inline void set_sig(const char* value, size_t size);
  inline ::std::string* mutable_sig();
  inline ::std::string* release_sig();
  inline void set_allocated_sig(::std::string* sig);

  // @@protoc_insertion_point(class_scope:fantasybit.SignedBlockHeader)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_sig();
  inline void clear_has_sig();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::fantasybit::BlockHeader* head_;
  ::std::string* sig_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static SignedBlockHeader* default_instance_;
};
// -------------------------------------------------------------------

class Block : public ::google::protobuf::Message {
 public:
  Block();
  virtual ~Block();

  Block(const Block& from);

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Block& default_instance();

  void Swap(Block* other);

  // implements Message ----------------------------------------------

  Block* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Block& from);
  void MergeFrom(const Block& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fantasybit.SignedBlockHeader signedhead = 10;
  inline bool has_signedhead() const;
  inline void clear_signedhead();
  static const int kSignedheadFieldNumber = 10;
  inline const ::fantasybit::SignedBlockHeader& signedhead() const;
  inline ::fantasybit::SignedBlockHeader* mutable_signedhead();
  inline ::fantasybit::SignedBlockHeader* release_signedhead();
  inline void set_allocated_signedhead(::fantasybit::SignedBlockHeader* signedhead);

  // repeated .fantasybit.SignedTransaction signed_transactions = 20;
  inline int signed_transactions_size() const;
  inline void clear_signed_transactions();
  static const int kSignedTransactionsFieldNumber = 20;
  inline const ::fantasybit::SignedTransaction& signed_transactions(int index) const;
  inline ::fantasybit::SignedTransaction* mutable_signed_transactions(int index);
  inline ::fantasybit::SignedTransaction* add_signed_transactions();
  inline const ::google::protobuf::RepeatedPtrField< ::fantasybit::SignedTransaction >&
      signed_transactions() const;
  inline ::google::protobuf::RepeatedPtrField< ::fantasybit::SignedTransaction >*
      mutable_signed_transactions();

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Block)
  // @@protoc_insertion_point(class_scope:fantasybit.Block)
 private:
  inline void set_has_signedhead();
  inline void clear_has_signedhead();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::fantasybit::SignedBlockHeader* signedhead_;
  ::google::protobuf::RepeatedPtrField< ::fantasybit::SignedTransaction > signed_transactions_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static Block* default_instance_;
};
// -------------------------------------------------------------------

class NodeRequest : public ::google::protobuf::Message {
 public:
  NodeRequest();
  virtual ~NodeRequest();

  NodeRequest(const NodeRequest& from);

  inline NodeRequest& operator=(const NodeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeRequest& default_instance();

  void Swap(NodeRequest* other);

  // implements Message ----------------------------------------------

  NodeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeRequest& from);
  void MergeFrom(const NodeRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef NodeRequest_Type Type;
  static const Type HANDSHAKE = NodeRequest_Type_HANDSHAKE;
  static const Type BLOCK_REQUEST = NodeRequest_Type_BLOCK_REQUEST;
  static const Type HIGHT_REQUEST = NodeRequest_Type_HIGHT_REQUEST;
  static inline bool Type_IsValid(int value) {
    return NodeRequest_Type_IsValid(value);
  }
  static const Type Type_MIN =
    NodeRequest_Type_Type_MIN;
  static const Type Type_MAX =
    NodeRequest_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    NodeRequest_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return NodeRequest_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return NodeRequest_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return NodeRequest_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .fantasybit.NodeRequest.Type type = 10;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 10;
  inline ::fantasybit::NodeRequest_Type type() const;
  inline void set_type(::fantasybit::NodeRequest_Type value);

  // optional string myip = 20;
  inline bool has_myip() const;
  inline void clear_myip();
  static const int kMyipFieldNumber = 20;
  inline const ::std::string& myip() const;
  inline void set_myip(const ::std::string& value);
  inline void set_myip(const char* value);
  inline void set_myip(const char* value, size_t size);
  inline ::std::string* mutable_myip();
  inline ::std::string* release_myip();
  inline void set_allocated_myip(::std::string* myip);

  // optional int32 num = 30;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 30;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional string myhost = 40;
  inline bool has_myhost() const;
  inline void clear_myhost();
  static const int kMyhostFieldNumber = 40;
  inline const ::std::string& myhost() const;
  inline void set_myhost(const ::std::string& value);
  inline void set_myhost(const char* value);
  inline void set_myhost(const char* value, size_t size);
  inline ::std::string* mutable_myhost();
  inline ::std::string* release_myhost();
  inline void set_allocated_myhost(::std::string* myhost);

  // @@protoc_insertion_point(class_scope:fantasybit.NodeRequest)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_myip();
  inline void clear_has_myip();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_myhost();
  inline void clear_has_myhost();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* myip_;
  int type_;
  ::google::protobuf::int32 num_;
  ::std::string* myhost_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static NodeRequest* default_instance_;
};
// -------------------------------------------------------------------

class NodeReply : public ::google::protobuf::Message {
 public:
  NodeReply();
  virtual ~NodeReply();

  NodeReply(const NodeReply& from);

  inline NodeReply& operator=(const NodeReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeReply& default_instance();

  void Swap(NodeReply* other);

  // implements Message ----------------------------------------------

  NodeReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeReply& from);
  void MergeFrom(const NodeReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 hight = 10;
  inline bool has_hight() const;
  inline void clear_hight();
  static const int kHightFieldNumber = 10;
  inline ::google::protobuf::int32 hight() const;
  inline void set_hight(::google::protobuf::int32 value);

  // repeated string ips = 20;
  inline int ips_size() const;
  inline void clear_ips();
  static const int kIpsFieldNumber = 20;
  inline const ::std::string& ips(int index) const;
  inline ::std::string* mutable_ips(int index);
  inline void set_ips(int index, const ::std::string& value);
  inline void set_ips(int index, const char* value);
  inline void set_ips(int index, const char* value, size_t size);
  inline ::std::string* add_ips();
  inline void add_ips(const ::std::string& value);
  inline void add_ips(const char* value);
  inline void add_ips(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& ips() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_ips();

  // @@protoc_insertion_point(class_scope:fantasybit.NodeReply)
 private:
  inline void set_has_hight();
  inline void clear_has_hight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> ips_;
  ::google::protobuf::int32 hight_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static NodeReply* default_instance_;
};
// -------------------------------------------------------------------

class FantasyPlayerPoints : public ::google::protobuf::Message {
 public:
  FantasyPlayerPoints();
  virtual ~FantasyPlayerPoints();

  FantasyPlayerPoints(const FantasyPlayerPoints& from);

  inline FantasyPlayerPoints& operator=(const FantasyPlayerPoints& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FantasyPlayerPoints& default_instance();

  void Swap(FantasyPlayerPoints* other);

  // implements Message ----------------------------------------------

  FantasyPlayerPoints* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FantasyPlayerPoints& from);
  void MergeFrom(const FantasyPlayerPoints& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 season = 10;
  inline bool has_season() const;
  inline void clear_season();
  static const int kSeasonFieldNumber = 10;
  inline ::google::protobuf::uint32 season() const;
  inline void set_season(::google::protobuf::uint32 value);

  // optional uint32 week = 20;
  inline bool has_week() const;
  inline void clear_week();
  static const int kWeekFieldNumber = 20;
  inline ::google::protobuf::uint32 week() const;
  inline void set_week(::google::protobuf::uint32 value);

  // optional uint32 playerid = 30;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 30;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // optional int32 points = 40;
  inline bool has_points() const;
  inline void clear_points();
  static const int kPointsFieldNumber = 40;
  inline ::google::protobuf::int32 points() const;
  inline void set_points(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fantasybit.FantasyPlayerPoints)
 private:
  inline void set_has_season();
  inline void clear_has_season();
  inline void set_has_week();
  inline void clear_has_week();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_points();
  inline void clear_has_points();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 season_;
  ::google::protobuf::uint32 week_;
  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::int32 points_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static FantasyPlayerPoints* default_instance_;
};
// -------------------------------------------------------------------

class ProjectionTrans : public ::google::protobuf::Message {
 public:
  ProjectionTrans();
  virtual ~ProjectionTrans();

  ProjectionTrans(const ProjectionTrans& from);

  inline ProjectionTrans& operator=(const ProjectionTrans& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProjectionTrans& default_instance();

  void Swap(ProjectionTrans* other);

  // implements Message ----------------------------------------------

  ProjectionTrans* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProjectionTrans& from);
  void MergeFrom(const ProjectionTrans& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fantasybit.FantasyPlayerPoints fpp = 10;
  inline bool has_fpp() const;
  inline void clear_fpp();
  static const int kFppFieldNumber = 10;
  inline const ::fantasybit::FantasyPlayerPoints& fpp() const;
  inline ::fantasybit::FantasyPlayerPoints* mutable_fpp();
  inline ::fantasybit::FantasyPlayerPoints* release_fpp();
  inline void set_allocated_fpp(::fantasybit::FantasyPlayerPoints* fpp);

  static const int kProjTransFieldNumber = 201;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Transaction,
      ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::ProjectionTrans >, 11, false >
    proj_trans;
  // @@protoc_insertion_point(class_scope:fantasybit.ProjectionTrans)
 private:
  inline void set_has_fpp();
  inline void clear_has_fpp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::fantasybit::FantasyPlayerPoints* fpp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static ProjectionTrans* default_instance_;
};
// -------------------------------------------------------------------

class Data : public ::google::protobuf::Message {
 public:
  Data();
  virtual ~Data();

  Data(const Data& from);

  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Data& default_instance();

  void Swap(Data* other);

  // implements Message ----------------------------------------------

  Data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Data& from);
  void MergeFrom(const Data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 version = 10;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 10;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // optional .fantasybit.DataType type = 20;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 20;
  inline ::fantasybit::DataType type() const;
  inline void set_type(::fantasybit::DataType value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Data)
  // @@protoc_insertion_point(class_scope:fantasybit.Data)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 version_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static Data* default_instance_;
};
// -------------------------------------------------------------------

class PlayerData : public ::google::protobuf::Message {
 public:
  PlayerData();
  virtual ~PlayerData();

  PlayerData(const PlayerData& from);

  inline PlayerData& operator=(const PlayerData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerData& default_instance();

  void Swap(PlayerData* other);

  // implements Message ----------------------------------------------

  PlayerData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerData& from);
  void MergeFrom(const PlayerData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 playerid = 10;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 10;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);

  // optional uint32 teamid = 20;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamidFieldNumber = 20;
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  static const int kPlayerFieldNumber = 101;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Data,
      ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::PlayerData >, 11, false >
    player;
  // @@protoc_insertion_point(class_scope:fantasybit.PlayerData)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_teamid();
  inline void clear_has_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 playerid_;
  ::google::protobuf::uint32 teamid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static PlayerData* default_instance_;
};
// -------------------------------------------------------------------

class TeamData : public ::google::protobuf::Message {
 public:
  TeamData();
  virtual ~TeamData();

  TeamData(const TeamData& from);

  inline TeamData& operator=(const TeamData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamData& default_instance();

  void Swap(TeamData* other);

  // implements Message ----------------------------------------------

  TeamData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeamData& from);
  void MergeFrom(const TeamData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 teamid = 10;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamidFieldNumber = 10;
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  static const int kTeamDataFieldNumber = 111;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Data,
      ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::TeamData >, 11, false >
    team_data;
  // @@protoc_insertion_point(class_scope:fantasybit.TeamData)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 teamid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static TeamData* default_instance_;
};
// -------------------------------------------------------------------

class ResultData : public ::google::protobuf::Message {
 public:
  ResultData();
  virtual ~ResultData();

  ResultData(const ResultData& from);

  inline ResultData& operator=(const ResultData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResultData& default_instance();

  void Swap(ResultData* other);

  // implements Message ----------------------------------------------

  ResultData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResultData& from);
  void MergeFrom(const ResultData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .fantasybit.FantasyPlayerPoints fpp = 10;
  inline bool has_fpp() const;
  inline void clear_fpp();
  static const int kFppFieldNumber = 10;
  inline const ::fantasybit::FantasyPlayerPoints& fpp() const;
  inline ::fantasybit::FantasyPlayerPoints* mutable_fpp();
  inline ::fantasybit::FantasyPlayerPoints* release_fpp();
  inline void set_allocated_fpp(::fantasybit::FantasyPlayerPoints* fpp);

  static const int kResultDataFieldNumber = 202;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Data,
      ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::ResultData >, 11, false >
    result_data;
  // @@protoc_insertion_point(class_scope:fantasybit.ResultData)
 private:
  inline void set_has_fpp();
  inline void clear_has_fpp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::fantasybit::FantasyPlayerPoints* fpp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static ResultData* default_instance_;
};
// -------------------------------------------------------------------

class DataTransition : public ::google::protobuf::Message {
 public:
  DataTransition();
  virtual ~DataTransition();

  DataTransition(const DataTransition& from);

  inline DataTransition& operator=(const DataTransition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataTransition& default_instance();

  void Swap(DataTransition* other);

  // implements Message ----------------------------------------------

  DataTransition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataTransition& from);
  void MergeFrom(const DataTransition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DataTransition_Type Type;
  static const Type ROSTER = DataTransition_Type_ROSTER;
  static const Type SEASONSTART = DataTransition_Type_SEASONSTART;
  static const Type SEASONEND = DataTransition_Type_SEASONEND;
  static const Type DRAFTOVER = DataTransition_Type_DRAFTOVER;
  static const Type HEARTBEAT = DataTransition_Type_HEARTBEAT;
  static const Type GAMESTART = DataTransition_Type_GAMESTART;
  static const Type WEEKOVER = DataTransition_Type_WEEKOVER;
  static inline bool Type_IsValid(int value) {
    return DataTransition_Type_IsValid(value);
  }
  static const Type Type_MIN =
    DataTransition_Type_Type_MIN;
  static const Type Type_MAX =
    DataTransition_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    DataTransition_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return DataTransition_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return DataTransition_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return DataTransition_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .fantasybit.DataTransition.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::fantasybit::DataTransition_Type type() const;
  inline void set_type(::fantasybit::DataTransition_Type value);

  // optional uint32 season = 10;
  inline bool has_season() const;
  inline void clear_season();
  static const int kSeasonFieldNumber = 10;
  inline ::google::protobuf::uint32 season() const;
  inline void set_season(::google::protobuf::uint32 value);

  // optional uint32 week = 20;
  inline bool has_week() const;
  inline void clear_week();
  static const int kWeekFieldNumber = 20;
  inline ::google::protobuf::uint32 week() const;
  inline void set_week(::google::protobuf::uint32 value);

  // repeated uint32 teamid = 30;
  inline int teamid_size() const;
  inline void clear_teamid();
  static const int kTeamidFieldNumber = 30;
  inline ::google::protobuf::uint32 teamid(int index) const;
  inline void set_teamid(int index, ::google::protobuf::uint32 value);
  inline void add_teamid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      teamid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_teamid();

  // repeated .fantasybit.Data data = 40;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 40;
  inline const ::fantasybit::Data& data(int index) const;
  inline ::fantasybit::Data* mutable_data(int index);
  inline ::fantasybit::Data* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::fantasybit::Data >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::fantasybit::Data >*
      mutable_data();

  static const int kDataTransFieldNumber = 203;
  static ::google::protobuf::internal::ExtensionIdentifier< ::fantasybit::Transaction,
      ::google::protobuf::internal::MessageTypeTraits< ::fantasybit::DataTransition >, 11, false >
    data_trans;
  // @@protoc_insertion_point(class_scope:fantasybit.DataTransition)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_season();
  inline void clear_has_season();
  inline void set_has_week();
  inline void clear_has_week();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 season_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > teamid_;
  ::google::protobuf::RepeatedPtrField< ::fantasybit::Data > data_;
  ::google::protobuf::uint32 week_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoData_2eproto();
  friend void protobuf_AssignDesc_ProtoData_2eproto();
  friend void protobuf_ShutdownFile_ProtoData_2eproto();

  void InitAsDefaultInstance();
  static DataTransition* default_instance_;
};
// ===================================================================


// ===================================================================

// MyFantasyName

// required string name = 1;
inline bool MyFantasyName::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MyFantasyName::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MyFantasyName::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MyFantasyName::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MyFantasyName::name() const {
  return *name_;
}
inline void MyFantasyName::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MyFantasyName::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MyFantasyName::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MyFantasyName::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* MyFantasyName::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MyFantasyName::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .fantasybit.MyNameStatus status = 2;
inline bool MyFantasyName::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MyFantasyName::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MyFantasyName::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MyFantasyName::clear_status() {
  status_ = 1;
  clear_has_status();
}
inline ::fantasybit::MyNameStatus MyFantasyName::status() const {
  return static_cast< ::fantasybit::MyNameStatus >(status_);
}
inline void MyFantasyName::set_status(::fantasybit::MyNameStatus value) {
  assert(::fantasybit::MyNameStatus_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional .fantasybit.NameTransaction nametransaction = 3;
inline bool MyFantasyName::has_nametransaction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MyFantasyName::set_has_nametransaction() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MyFantasyName::clear_has_nametransaction() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MyFantasyName::clear_nametransaction() {
  if (nametransaction_ != NULL) nametransaction_->::fantasybit::NameTransaction::Clear();
  clear_has_nametransaction();
}
inline const ::fantasybit::NameTransaction& MyFantasyName::nametransaction() const {
  return nametransaction_ != NULL ? *nametransaction_ : *default_instance_->nametransaction_;
}
inline ::fantasybit::NameTransaction* MyFantasyName::mutable_nametransaction() {
  set_has_nametransaction();
  if (nametransaction_ == NULL) nametransaction_ = new ::fantasybit::NameTransaction;
  return nametransaction_;
}
inline ::fantasybit::NameTransaction* MyFantasyName::release_nametransaction() {
  clear_has_nametransaction();
  ::fantasybit::NameTransaction* temp = nametransaction_;
  nametransaction_ = NULL;
  return temp;
}
inline void MyFantasyName::set_allocated_nametransaction(::fantasybit::NameTransaction* nametransaction) {
  delete nametransaction_;
  nametransaction_ = nametransaction;
  if (nametransaction) {
    set_has_nametransaction();
  } else {
    clear_has_nametransaction();
  }
}

// -------------------------------------------------------------------

// Secret

// required string private_key = 1;
inline bool Secret::has_private_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Secret::set_has_private_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Secret::clear_has_private_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Secret::clear_private_key() {
  if (private_key_ != &::google::protobuf::internal::kEmptyString) {
    private_key_->clear();
  }
  clear_has_private_key();
}
inline const ::std::string& Secret::private_key() const {
  return *private_key_;
}
inline void Secret::set_private_key(const ::std::string& value) {
  set_has_private_key();
  if (private_key_ == &::google::protobuf::internal::kEmptyString) {
    private_key_ = new ::std::string;
  }
  private_key_->assign(value);
}
inline void Secret::set_private_key(const char* value) {
  set_has_private_key();
  if (private_key_ == &::google::protobuf::internal::kEmptyString) {
    private_key_ = new ::std::string;
  }
  private_key_->assign(value);
}
inline void Secret::set_private_key(const char* value, size_t size) {
  set_has_private_key();
  if (private_key_ == &::google::protobuf::internal::kEmptyString) {
    private_key_ = new ::std::string;
  }
  private_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Secret::mutable_private_key() {
  set_has_private_key();
  if (private_key_ == &::google::protobuf::internal::kEmptyString) {
    private_key_ = new ::std::string;
  }
  return private_key_;
}
inline ::std::string* Secret::release_private_key() {
  clear_has_private_key();
  if (private_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = private_key_;
    private_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Secret::set_allocated_private_key(::std::string* private_key) {
  if (private_key_ != &::google::protobuf::internal::kEmptyString) {
    delete private_key_;
  }
  if (private_key) {
    set_has_private_key();
    private_key_ = private_key;
  } else {
    clear_has_private_key();
    private_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .fantasybit.MyFantasyName myfantasyname = 2;
inline bool Secret::has_myfantasyname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Secret::set_has_myfantasyname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Secret::clear_has_myfantasyname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Secret::clear_myfantasyname() {
  if (myfantasyname_ != NULL) myfantasyname_->::fantasybit::MyFantasyName::Clear();
  clear_has_myfantasyname();
}
inline const ::fantasybit::MyFantasyName& Secret::myfantasyname() const {
  return myfantasyname_ != NULL ? *myfantasyname_ : *default_instance_->myfantasyname_;
}
inline ::fantasybit::MyFantasyName* Secret::mutable_myfantasyname() {
  set_has_myfantasyname();
  if (myfantasyname_ == NULL) myfantasyname_ = new ::fantasybit::MyFantasyName;
  return myfantasyname_;
}
inline ::fantasybit::MyFantasyName* Secret::release_myfantasyname() {
  clear_has_myfantasyname();
  ::fantasybit::MyFantasyName* temp = myfantasyname_;
  myfantasyname_ = NULL;
  return temp;
}
inline void Secret::set_allocated_myfantasyname(::fantasybit::MyFantasyName* myfantasyname) {
  delete myfantasyname_;
  myfantasyname_ = myfantasyname;
  if (myfantasyname) {
    set_has_myfantasyname();
  } else {
    clear_has_myfantasyname();
  }
}

// -------------------------------------------------------------------

// FantasyNameT

// required string public_key = 1;
inline bool FantasyNameT::has_public_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FantasyNameT::set_has_public_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FantasyNameT::clear_has_public_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FantasyNameT::clear_public_key() {
  if (public_key_ != &::google::protobuf::internal::kEmptyString) {
    public_key_->clear();
  }
  clear_has_public_key();
}
inline const ::std::string& FantasyNameT::public_key() const {
  return *public_key_;
}
inline void FantasyNameT::set_public_key(const ::std::string& value) {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::kEmptyString) {
    public_key_ = new ::std::string;
  }
  public_key_->assign(value);
}
inline void FantasyNameT::set_public_key(const char* value) {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::kEmptyString) {
    public_key_ = new ::std::string;
  }
  public_key_->assign(value);
}
inline void FantasyNameT::set_public_key(const char* value, size_t size) {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::kEmptyString) {
    public_key_ = new ::std::string;
  }
  public_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FantasyNameT::mutable_public_key() {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::kEmptyString) {
    public_key_ = new ::std::string;
  }
  return public_key_;
}
inline ::std::string* FantasyNameT::release_public_key() {
  clear_has_public_key();
  if (public_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = public_key_;
    public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FantasyNameT::set_allocated_public_key(::std::string* public_key) {
  if (public_key_ != &::google::protobuf::internal::kEmptyString) {
    delete public_key_;
  }
  if (public_key) {
    set_has_public_key();
    public_key_ = public_key;
  } else {
    clear_has_public_key();
    public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string hash = 2;
inline bool FantasyNameT::has_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FantasyNameT::set_has_hash() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FantasyNameT::clear_has_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FantasyNameT::clear_hash() {
  if (hash_ != &::google::protobuf::internal::kEmptyString) {
    hash_->clear();
  }
  clear_has_hash();
}
inline const ::std::string& FantasyNameT::hash() const {
  return *hash_;
}
inline void FantasyNameT::set_hash(const ::std::string& value) {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    hash_ = new ::std::string;
  }
  hash_->assign(value);
}
inline void FantasyNameT::set_hash(const char* value) {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    hash_ = new ::std::string;
  }
  hash_->assign(value);
}
inline void FantasyNameT::set_hash(const char* value, size_t size) {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    hash_ = new ::std::string;
  }
  hash_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FantasyNameT::mutable_hash() {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    hash_ = new ::std::string;
  }
  return hash_;
}
inline ::std::string* FantasyNameT::release_hash() {
  clear_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hash_;
    hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FantasyNameT::set_allocated_hash(::std::string* hash) {
  if (hash_ != &::google::protobuf::internal::kEmptyString) {
    delete hash_;
  }
  if (hash) {
    set_has_hash();
    hash_ = hash;
  } else {
    clear_has_hash();
    hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .fantasybit.BitStake balances = 3;
inline bool FantasyNameT::has_balances() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FantasyNameT::set_has_balances() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FantasyNameT::clear_has_balances() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FantasyNameT::clear_balances() {
  if (balances_ != NULL) balances_->::fantasybit::BitStake::Clear();
  clear_has_balances();
}
inline const ::fantasybit::BitStake& FantasyNameT::balances() const {
  return balances_ != NULL ? *balances_ : *default_instance_->balances_;
}
inline ::fantasybit::BitStake* FantasyNameT::mutable_balances() {
  set_has_balances();
  if (balances_ == NULL) balances_ = new ::fantasybit::BitStake;
  return balances_;
}
inline ::fantasybit::BitStake* FantasyNameT::release_balances() {
  clear_has_balances();
  ::fantasybit::BitStake* temp = balances_;
  balances_ = NULL;
  return temp;
}
inline void FantasyNameT::set_allocated_balances(::fantasybit::BitStake* balances) {
  delete balances_;
  balances_ = balances;
  if (balances) {
    set_has_balances();
  } else {
    clear_has_balances();
  }
}

// optional string name = 4;
inline bool FantasyNameT::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FantasyNameT::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FantasyNameT::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FantasyNameT::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FantasyNameT::name() const {
  return *name_;
}
inline void FantasyNameT::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FantasyNameT::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FantasyNameT::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FantasyNameT::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FantasyNameT::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FantasyNameT::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// BitStake

// -------------------------------------------------------------------

// NameTransaction

// required uint64 hash = 1;
inline bool NameTransaction::has_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NameTransaction::set_has_hash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NameTransaction::clear_has_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NameTransaction::clear_hash() {
  hash_ = GOOGLE_ULONGLONG(0);
  clear_has_hash();
}
inline ::google::protobuf::uint64 NameTransaction::hash() const {
  return hash_;
}
inline void NameTransaction::set_hash(::google::protobuf::uint64 value) {
  set_has_hash();
  hash_ = value;
}

// required bytes public_key = 2;
inline bool NameTransaction::has_public_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NameTransaction::set_has_public_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NameTransaction::clear_has_public_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NameTransaction::clear_public_key() {
  if (public_key_ != &::google::protobuf::internal::kEmptyString) {
    public_key_->clear();
  }
  clear_has_public_key();
}
inline const ::std::string& NameTransaction::public_key() const {
  return *public_key_;
}
inline void NameTransaction::set_public_key(const ::std::string& value) {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::kEmptyString) {
    public_key_ = new ::std::string;
  }
  public_key_->assign(value);
}
inline void NameTransaction::set_public_key(const char* value) {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::kEmptyString) {
    public_key_ = new ::std::string;
  }
  public_key_->assign(value);
}
inline void NameTransaction::set_public_key(const void* value, size_t size) {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::kEmptyString) {
    public_key_ = new ::std::string;
  }
  public_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NameTransaction::mutable_public_key() {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::kEmptyString) {
    public_key_ = new ::std::string;
  }
  return public_key_;
}
inline ::std::string* NameTransaction::release_public_key() {
  clear_has_public_key();
  if (public_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = public_key_;
    public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NameTransaction::set_allocated_public_key(::std::string* public_key) {
  if (public_key_ != &::google::protobuf::internal::kEmptyString) {
    delete public_key_;
  }
  if (public_key) {
    set_has_public_key();
    public_key_ = public_key;
  } else {
    clear_has_public_key();
    public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 nonce = 3;
inline bool NameTransaction::has_nonce() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NameTransaction::set_has_nonce() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NameTransaction::clear_has_nonce() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NameTransaction::clear_nonce() {
  nonce_ = 0u;
  clear_has_nonce();
}
inline ::google::protobuf::uint32 NameTransaction::nonce() const {
  return nonce_;
}
inline void NameTransaction::set_nonce(::google::protobuf::uint32 value) {
  set_has_nonce();
  nonce_ = value;
}

// required uint32 utc_sec = 4;
inline bool NameTransaction::has_utc_sec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NameTransaction::set_has_utc_sec() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NameTransaction::clear_has_utc_sec() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NameTransaction::clear_utc_sec() {
  utc_sec_ = 0u;
  clear_has_utc_sec();
}
inline ::google::protobuf::uint32 NameTransaction::utc_sec() const {
  return utc_sec_;
}
inline void NameTransaction::set_utc_sec(::google::protobuf::uint32 value) {
  set_has_utc_sec();
  utc_sec_ = value;
}

// required string prev_id = 5;
inline bool NameTransaction::has_prev_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NameTransaction::set_has_prev_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NameTransaction::clear_has_prev_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NameTransaction::clear_prev_id() {
  if (prev_id_ != &::google::protobuf::internal::kEmptyString) {
    prev_id_->clear();
  }
  clear_has_prev_id();
}
inline const ::std::string& NameTransaction::prev_id() const {
  return *prev_id_;
}
inline void NameTransaction::set_prev_id(const ::std::string& value) {
  set_has_prev_id();
  if (prev_id_ == &::google::protobuf::internal::kEmptyString) {
    prev_id_ = new ::std::string;
  }
  prev_id_->assign(value);
}
inline void NameTransaction::set_prev_id(const char* value) {
  set_has_prev_id();
  if (prev_id_ == &::google::protobuf::internal::kEmptyString) {
    prev_id_ = new ::std::string;
  }
  prev_id_->assign(value);
}
inline void NameTransaction::set_prev_id(const char* value, size_t size) {
  set_has_prev_id();
  if (prev_id_ == &::google::protobuf::internal::kEmptyString) {
    prev_id_ = new ::std::string;
  }
  prev_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NameTransaction::mutable_prev_id() {
  set_has_prev_id();
  if (prev_id_ == &::google::protobuf::internal::kEmptyString) {
    prev_id_ = new ::std::string;
  }
  return prev_id_;
}
inline ::std::string* NameTransaction::release_prev_id() {
  clear_has_prev_id();
  if (prev_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = prev_id_;
    prev_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NameTransaction::set_allocated_prev_id(::std::string* prev_id) {
  if (prev_id_ != &::google::protobuf::internal::kEmptyString) {
    delete prev_id_;
  }
  if (prev_id) {
    set_has_prev_id();
    prev_id_ = prev_id;
  } else {
    clear_has_prev_id();
    prev_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes sig = 6;
inline bool NameTransaction::has_sig() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NameTransaction::set_has_sig() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NameTransaction::clear_has_sig() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NameTransaction::clear_sig() {
  if (sig_ != &::google::protobuf::internal::kEmptyString) {
    sig_->clear();
  }
  clear_has_sig();
}
inline const ::std::string& NameTransaction::sig() const {
  return *sig_;
}
inline void NameTransaction::set_sig(const ::std::string& value) {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    sig_ = new ::std::string;
  }
  sig_->assign(value);
}
inline void NameTransaction::set_sig(const char* value) {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    sig_ = new ::std::string;
  }
  sig_->assign(value);
}
inline void NameTransaction::set_sig(const void* value, size_t size) {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    sig_ = new ::std::string;
  }
  sig_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NameTransaction::mutable_sig() {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    sig_ = new ::std::string;
  }
  return sig_;
}
inline ::std::string* NameTransaction::release_sig() {
  clear_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sig_;
    sig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NameTransaction::set_allocated_sig(::std::string* sig) {
  if (sig_ != &::google::protobuf::internal::kEmptyString) {
    delete sig_;
  }
  if (sig) {
    set_has_sig();
    sig_ = sig;
  } else {
    clear_has_sig();
    sig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sigid = 7;
inline bool NameTransaction::has_sigid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NameTransaction::set_has_sigid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NameTransaction::clear_has_sigid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NameTransaction::clear_sigid() {
  if (sigid_ != &::google::protobuf::internal::kEmptyString) {
    sigid_->clear();
  }
  clear_has_sigid();
}
inline const ::std::string& NameTransaction::sigid() const {
  return *sigid_;
}
inline void NameTransaction::set_sigid(const ::std::string& value) {
  set_has_sigid();
  if (sigid_ == &::google::protobuf::internal::kEmptyString) {
    sigid_ = new ::std::string;
  }
  sigid_->assign(value);
}
inline void NameTransaction::set_sigid(const char* value) {
  set_has_sigid();
  if (sigid_ == &::google::protobuf::internal::kEmptyString) {
    sigid_ = new ::std::string;
  }
  sigid_->assign(value);
}
inline void NameTransaction::set_sigid(const char* value, size_t size) {
  set_has_sigid();
  if (sigid_ == &::google::protobuf::internal::kEmptyString) {
    sigid_ = new ::std::string;
  }
  sigid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NameTransaction::mutable_sigid() {
  set_has_sigid();
  if (sigid_ == &::google::protobuf::internal::kEmptyString) {
    sigid_ = new ::std::string;
  }
  return sigid_;
}
inline ::std::string* NameTransaction::release_sigid() {
  clear_has_sigid();
  if (sigid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sigid_;
    sigid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NameTransaction::set_allocated_sigid(::std::string* sigid) {
  if (sigid_ != &::google::protobuf::internal::kEmptyString) {
    delete sigid_;
  }
  if (sigid) {
    set_has_sigid();
    sigid_ = sigid;
  } else {
    clear_has_sigid();
    sigid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// OutData

// required .fantasybit.OutData.Type type = 1;
inline bool OutData::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OutData::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OutData::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OutData::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::fantasybit::OutData_Type OutData::type() const {
  return static_cast< ::fantasybit::OutData_Type >(type_);
}
inline void OutData::set_type(::fantasybit::OutData_Type value) {
  assert(::fantasybit::OutData_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .fantasybit.MyFantasyName myfantasyname = 2;
inline bool OutData::has_myfantasyname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OutData::set_has_myfantasyname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OutData::clear_has_myfantasyname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OutData::clear_myfantasyname() {
  if (myfantasyname_ != NULL) myfantasyname_->::fantasybit::MyFantasyName::Clear();
  clear_has_myfantasyname();
}
inline const ::fantasybit::MyFantasyName& OutData::myfantasyname() const {
  return myfantasyname_ != NULL ? *myfantasyname_ : *default_instance_->myfantasyname_;
}
inline ::fantasybit::MyFantasyName* OutData::mutable_myfantasyname() {
  set_has_myfantasyname();
  if (myfantasyname_ == NULL) myfantasyname_ = new ::fantasybit::MyFantasyName;
  return myfantasyname_;
}
inline ::fantasybit::MyFantasyName* OutData::release_myfantasyname() {
  clear_has_myfantasyname();
  ::fantasybit::MyFantasyName* temp = myfantasyname_;
  myfantasyname_ = NULL;
  return temp;
}
inline void OutData::set_allocated_myfantasyname(::fantasybit::MyFantasyName* myfantasyname) {
  delete myfantasyname_;
  myfantasyname_ = myfantasyname;
  if (myfantasyname) {
    set_has_myfantasyname();
  } else {
    clear_has_myfantasyname();
  }
}

// -------------------------------------------------------------------

// InData

// required .fantasybit.InData.Type type = 1;
inline bool InData::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InData::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InData::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InData::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::fantasybit::InData_Type InData::type() const {
  return static_cast< ::fantasybit::InData_Type >(type_);
}
inline void InData::set_type(::fantasybit::InData_Type value) {
  assert(::fantasybit::InData_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string data = 2;
inline bool InData::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InData::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InData::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InData::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& InData::data() const {
  return *data_;
}
inline void InData::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void InData::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void InData::set_data(const char* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InData::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* InData::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InData::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string data2 = 3;
inline bool InData::has_data2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InData::set_has_data2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InData::clear_has_data2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InData::clear_data2() {
  if (data2_ != &::google::protobuf::internal::kEmptyString) {
    data2_->clear();
  }
  clear_has_data2();
}
inline const ::std::string& InData::data2() const {
  return *data2_;
}
inline void InData::set_data2(const ::std::string& value) {
  set_has_data2();
  if (data2_ == &::google::protobuf::internal::kEmptyString) {
    data2_ = new ::std::string;
  }
  data2_->assign(value);
}
inline void InData::set_data2(const char* value) {
  set_has_data2();
  if (data2_ == &::google::protobuf::internal::kEmptyString) {
    data2_ = new ::std::string;
  }
  data2_->assign(value);
}
inline void InData::set_data2(const char* value, size_t size) {
  set_has_data2();
  if (data2_ == &::google::protobuf::internal::kEmptyString) {
    data2_ = new ::std::string;
  }
  data2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InData::mutable_data2() {
  set_has_data2();
  if (data2_ == &::google::protobuf::internal::kEmptyString) {
    data2_ = new ::std::string;
  }
  return data2_;
}
inline ::std::string* InData::release_data2() {
  clear_has_data2();
  if (data2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data2_;
    data2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InData::set_allocated_data2(::std::string* data2) {
  if (data2_ != &::google::protobuf::internal::kEmptyString) {
    delete data2_;
  }
  if (data2) {
    set_has_data2();
    data2_ = data2;
  } else {
    clear_has_data2();
    data2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 num = 4;
inline bool InData::has_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InData::set_has_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InData::clear_has_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InData::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 InData::num() const {
  return num_;
}
inline void InData::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// NameProof

// optional .fantasybit.NameProof.Type type = 1;
inline bool NameProof::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NameProof::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NameProof::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NameProof::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::fantasybit::NameProof_Type NameProof::type() const {
  return static_cast< ::fantasybit::NameProof_Type >(type_);
}
inline void NameProof::set_type(::fantasybit::NameProof_Type value) {
  assert(::fantasybit::NameProof_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// NamePOW

// optional uint64 hash = 1;
inline bool NamePOW::has_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NamePOW::set_has_hash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NamePOW::clear_has_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NamePOW::clear_hash() {
  hash_ = GOOGLE_ULONGLONG(0);
  clear_has_hash();
}
inline ::google::protobuf::uint64 NamePOW::hash() const {
  return hash_;
}
inline void NamePOW::set_hash(::google::protobuf::uint64 value) {
  set_has_hash();
  hash_ = value;
}

// optional bytes public_key = 2;
inline bool NamePOW::has_public_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NamePOW::set_has_public_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NamePOW::clear_has_public_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NamePOW::clear_public_key() {
  if (public_key_ != &::google::protobuf::internal::kEmptyString) {
    public_key_->clear();
  }
  clear_has_public_key();
}
inline const ::std::string& NamePOW::public_key() const {
  return *public_key_;
}
inline void NamePOW::set_public_key(const ::std::string& value) {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::kEmptyString) {
    public_key_ = new ::std::string;
  }
  public_key_->assign(value);
}
inline void NamePOW::set_public_key(const char* value) {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::kEmptyString) {
    public_key_ = new ::std::string;
  }
  public_key_->assign(value);
}
inline void NamePOW::set_public_key(const void* value, size_t size) {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::kEmptyString) {
    public_key_ = new ::std::string;
  }
  public_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NamePOW::mutable_public_key() {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::kEmptyString) {
    public_key_ = new ::std::string;
  }
  return public_key_;
}
inline ::std::string* NamePOW::release_public_key() {
  clear_has_public_key();
  if (public_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = public_key_;
    public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NamePOW::set_allocated_public_key(::std::string* public_key) {
  if (public_key_ != &::google::protobuf::internal::kEmptyString) {
    delete public_key_;
  }
  if (public_key) {
    set_has_public_key();
    public_key_ = public_key;
  } else {
    clear_has_public_key();
    public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 nonce = 3;
inline bool NamePOW::has_nonce() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NamePOW::set_has_nonce() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NamePOW::clear_has_nonce() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NamePOW::clear_nonce() {
  nonce_ = 0u;
  clear_has_nonce();
}
inline ::google::protobuf::uint32 NamePOW::nonce() const {
  return nonce_;
}
inline void NamePOW::set_nonce(::google::protobuf::uint32 value) {
  set_has_nonce();
  nonce_ = value;
}

// optional uint32 utc_sec = 4;
inline bool NamePOW::has_utc_sec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NamePOW::set_has_utc_sec() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NamePOW::clear_has_utc_sec() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NamePOW::clear_utc_sec() {
  utc_sec_ = 0u;
  clear_has_utc_sec();
}
inline ::google::protobuf::uint32 NamePOW::utc_sec() const {
  return utc_sec_;
}
inline void NamePOW::set_utc_sec(::google::protobuf::uint32 value) {
  set_has_utc_sec();
  utc_sec_ = value;
}

// optional string prev_id = 5;
inline bool NamePOW::has_prev_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NamePOW::set_has_prev_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NamePOW::clear_has_prev_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NamePOW::clear_prev_id() {
  if (prev_id_ != &::google::protobuf::internal::kEmptyString) {
    prev_id_->clear();
  }
  clear_has_prev_id();
}
inline const ::std::string& NamePOW::prev_id() const {
  return *prev_id_;
}
inline void NamePOW::set_prev_id(const ::std::string& value) {
  set_has_prev_id();
  if (prev_id_ == &::google::protobuf::internal::kEmptyString) {
    prev_id_ = new ::std::string;
  }
  prev_id_->assign(value);
}
inline void NamePOW::set_prev_id(const char* value) {
  set_has_prev_id();
  if (prev_id_ == &::google::protobuf::internal::kEmptyString) {
    prev_id_ = new ::std::string;
  }
  prev_id_->assign(value);
}
inline void NamePOW::set_prev_id(const char* value, size_t size) {
  set_has_prev_id();
  if (prev_id_ == &::google::protobuf::internal::kEmptyString) {
    prev_id_ = new ::std::string;
  }
  prev_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NamePOW::mutable_prev_id() {
  set_has_prev_id();
  if (prev_id_ == &::google::protobuf::internal::kEmptyString) {
    prev_id_ = new ::std::string;
  }
  return prev_id_;
}
inline ::std::string* NamePOW::release_prev_id() {
  clear_has_prev_id();
  if (prev_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = prev_id_;
    prev_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NamePOW::set_allocated_prev_id(::std::string* prev_id) {
  if (prev_id_ != &::google::protobuf::internal::kEmptyString) {
    delete prev_id_;
  }
  if (prev_id) {
    set_has_prev_id();
    prev_id_ = prev_id;
  } else {
    clear_has_prev_id();
    prev_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes sig = 6;
inline bool NamePOW::has_sig() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NamePOW::set_has_sig() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NamePOW::clear_has_sig() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NamePOW::clear_sig() {
  if (sig_ != &::google::protobuf::internal::kEmptyString) {
    sig_->clear();
  }
  clear_has_sig();
}
inline const ::std::string& NamePOW::sig() const {
  return *sig_;
}
inline void NamePOW::set_sig(const ::std::string& value) {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    sig_ = new ::std::string;
  }
  sig_->assign(value);
}
inline void NamePOW::set_sig(const char* value) {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    sig_ = new ::std::string;
  }
  sig_->assign(value);
}
inline void NamePOW::set_sig(const void* value, size_t size) {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    sig_ = new ::std::string;
  }
  sig_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NamePOW::mutable_sig() {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    sig_ = new ::std::string;
  }
  return sig_;
}
inline ::std::string* NamePOW::release_sig() {
  clear_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sig_;
    sig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NamePOW::set_allocated_sig(::std::string* sig) {
  if (sig_ != &::google::protobuf::internal::kEmptyString) {
    delete sig_;
  }
  if (sig) {
    set_has_sig();
    sig_ = sig;
  } else {
    clear_has_sig();
    sig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sigid = 7;
inline bool NamePOW::has_sigid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NamePOW::set_has_sigid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NamePOW::clear_has_sigid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NamePOW::clear_sigid() {
  if (sigid_ != &::google::protobuf::internal::kEmptyString) {
    sigid_->clear();
  }
  clear_has_sigid();
}
inline const ::std::string& NamePOW::sigid() const {
  return *sigid_;
}
inline void NamePOW::set_sigid(const ::std::string& value) {
  set_has_sigid();
  if (sigid_ == &::google::protobuf::internal::kEmptyString) {
    sigid_ = new ::std::string;
  }
  sigid_->assign(value);
}
inline void NamePOW::set_sigid(const char* value) {
  set_has_sigid();
  if (sigid_ == &::google::protobuf::internal::kEmptyString) {
    sigid_ = new ::std::string;
  }
  sigid_->assign(value);
}
inline void NamePOW::set_sigid(const char* value, size_t size) {
  set_has_sigid();
  if (sigid_ == &::google::protobuf::internal::kEmptyString) {
    sigid_ = new ::std::string;
  }
  sigid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NamePOW::mutable_sigid() {
  set_has_sigid();
  if (sigid_ == &::google::protobuf::internal::kEmptyString) {
    sigid_ = new ::std::string;
  }
  return sigid_;
}
inline ::std::string* NamePOW::release_sigid() {
  clear_has_sigid();
  if (sigid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sigid_;
    sigid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NamePOW::set_allocated_sigid(::std::string* sigid) {
  if (sigid_ != &::google::protobuf::internal::kEmptyString) {
    delete sigid_;
  }
  if (sigid) {
    set_has_sigid();
    sigid_ = sigid;
  } else {
    clear_has_sigid();
    sigid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TweetProof

// optional string tweet = 10;
inline bool TweetProof::has_tweet() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TweetProof::set_has_tweet() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TweetProof::clear_has_tweet() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TweetProof::clear_tweet() {
  if (tweet_ != &::google::protobuf::internal::kEmptyString) {
    tweet_->clear();
  }
  clear_has_tweet();
}
inline const ::std::string& TweetProof::tweet() const {
  return *tweet_;
}
inline void TweetProof::set_tweet(const ::std::string& value) {
  set_has_tweet();
  if (tweet_ == &::google::protobuf::internal::kEmptyString) {
    tweet_ = new ::std::string;
  }
  tweet_->assign(value);
}
inline void TweetProof::set_tweet(const char* value) {
  set_has_tweet();
  if (tweet_ == &::google::protobuf::internal::kEmptyString) {
    tweet_ = new ::std::string;
  }
  tweet_->assign(value);
}
inline void TweetProof::set_tweet(const char* value, size_t size) {
  set_has_tweet();
  if (tweet_ == &::google::protobuf::internal::kEmptyString) {
    tweet_ = new ::std::string;
  }
  tweet_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TweetProof::mutable_tweet() {
  set_has_tweet();
  if (tweet_ == &::google::protobuf::internal::kEmptyString) {
    tweet_ = new ::std::string;
  }
  return tweet_;
}
inline ::std::string* TweetProof::release_tweet() {
  clear_has_tweet();
  if (tweet_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tweet_;
    tweet_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TweetProof::set_allocated_tweet(::std::string* tweet) {
  if (tweet_ != &::google::protobuf::internal::kEmptyString) {
    delete tweet_;
  }
  if (tweet) {
    set_has_tweet();
    tweet_ = tweet;
  } else {
    clear_has_tweet();
    tweet_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Transaction

// optional int32 version = 1;
inline bool Transaction::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transaction::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transaction::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transaction::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 Transaction::version() const {
  return version_;
}
inline void Transaction::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
}

// optional .fantasybit.TransType type = 2;
inline bool Transaction::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transaction::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transaction::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transaction::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::fantasybit::TransType Transaction::type() const {
  return static_cast< ::fantasybit::TransType >(type_);
}
inline void Transaction::set_type(::fantasybit::TransType value) {
  assert(::fantasybit::TransType_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// NameTrans

// optional string fantasy_name = 10;
inline bool NameTrans::has_fantasy_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NameTrans::set_has_fantasy_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NameTrans::clear_has_fantasy_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NameTrans::clear_fantasy_name() {
  if (fantasy_name_ != &::google::protobuf::internal::kEmptyString) {
    fantasy_name_->clear();
  }
  clear_has_fantasy_name();
}
inline const ::std::string& NameTrans::fantasy_name() const {
  return *fantasy_name_;
}
inline void NameTrans::set_fantasy_name(const ::std::string& value) {
  set_has_fantasy_name();
  if (fantasy_name_ == &::google::protobuf::internal::kEmptyString) {
    fantasy_name_ = new ::std::string;
  }
  fantasy_name_->assign(value);
}
inline void NameTrans::set_fantasy_name(const char* value) {
  set_has_fantasy_name();
  if (fantasy_name_ == &::google::protobuf::internal::kEmptyString) {
    fantasy_name_ = new ::std::string;
  }
  fantasy_name_->assign(value);
}
inline void NameTrans::set_fantasy_name(const char* value, size_t size) {
  set_has_fantasy_name();
  if (fantasy_name_ == &::google::protobuf::internal::kEmptyString) {
    fantasy_name_ = new ::std::string;
  }
  fantasy_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NameTrans::mutable_fantasy_name() {
  set_has_fantasy_name();
  if (fantasy_name_ == &::google::protobuf::internal::kEmptyString) {
    fantasy_name_ = new ::std::string;
  }
  return fantasy_name_;
}
inline ::std::string* NameTrans::release_fantasy_name() {
  clear_has_fantasy_name();
  if (fantasy_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fantasy_name_;
    fantasy_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NameTrans::set_allocated_fantasy_name(::std::string* fantasy_name) {
  if (fantasy_name_ != &::google::protobuf::internal::kEmptyString) {
    delete fantasy_name_;
  }
  if (fantasy_name) {
    set_has_fantasy_name();
    fantasy_name_ = fantasy_name;
  } else {
    clear_has_fantasy_name();
    fantasy_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes public_key = 20;
inline bool NameTrans::has_public_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NameTrans::set_has_public_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NameTrans::clear_has_public_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NameTrans::clear_public_key() {
  if (public_key_ != &::google::protobuf::internal::kEmptyString) {
    public_key_->clear();
  }
  clear_has_public_key();
}
inline const ::std::string& NameTrans::public_key() const {
  return *public_key_;
}
inline void NameTrans::set_public_key(const ::std::string& value) {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::kEmptyString) {
    public_key_ = new ::std::string;
  }
  public_key_->assign(value);
}
inline void NameTrans::set_public_key(const char* value) {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::kEmptyString) {
    public_key_ = new ::std::string;
  }
  public_key_->assign(value);
}
inline void NameTrans::set_public_key(const void* value, size_t size) {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::kEmptyString) {
    public_key_ = new ::std::string;
  }
  public_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NameTrans::mutable_public_key() {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::kEmptyString) {
    public_key_ = new ::std::string;
  }
  return public_key_;
}
inline ::std::string* NameTrans::release_public_key() {
  clear_has_public_key();
  if (public_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = public_key_;
    public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NameTrans::set_allocated_public_key(::std::string* public_key) {
  if (public_key_ != &::google::protobuf::internal::kEmptyString) {
    delete public_key_;
  }
  if (public_key) {
    set_has_public_key();
    public_key_ = public_key;
  } else {
    clear_has_public_key();
    public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .fantasybit.NameProof proof = 30;
inline bool NameTrans::has_proof() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NameTrans::set_has_proof() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NameTrans::clear_has_proof() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NameTrans::clear_proof() {
  if (proof_ != NULL) proof_->::fantasybit::NameProof::Clear();
  clear_has_proof();
}
inline const ::fantasybit::NameProof& NameTrans::proof() const {
  return proof_ != NULL ? *proof_ : *default_instance_->proof_;
}
inline ::fantasybit::NameProof* NameTrans::mutable_proof() {
  set_has_proof();
  if (proof_ == NULL) proof_ = new ::fantasybit::NameProof;
  return proof_;
}
inline ::fantasybit::NameProof* NameTrans::release_proof() {
  clear_has_proof();
  ::fantasybit::NameProof* temp = proof_;
  proof_ = NULL;
  return temp;
}
inline void NameTrans::set_allocated_proof(::fantasybit::NameProof* proof) {
  delete proof_;
  proof_ = proof;
  if (proof) {
    set_has_proof();
  } else {
    clear_has_proof();
  }
}

// -------------------------------------------------------------------

// SignedTransaction

// optional .fantasybit.Transaction trans = 10;
inline bool SignedTransaction::has_trans() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignedTransaction::set_has_trans() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignedTransaction::clear_has_trans() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignedTransaction::clear_trans() {
  if (trans_ != NULL) trans_->::fantasybit::Transaction::Clear();
  clear_has_trans();
}
inline const ::fantasybit::Transaction& SignedTransaction::trans() const {
  return trans_ != NULL ? *trans_ : *default_instance_->trans_;
}
inline ::fantasybit::Transaction* SignedTransaction::mutable_trans() {
  set_has_trans();
  if (trans_ == NULL) trans_ = new ::fantasybit::Transaction;
  return trans_;
}
inline ::fantasybit::Transaction* SignedTransaction::release_trans() {
  clear_has_trans();
  ::fantasybit::Transaction* temp = trans_;
  trans_ = NULL;
  return temp;
}
inline void SignedTransaction::set_allocated_trans(::fantasybit::Transaction* trans) {
  delete trans_;
  trans_ = trans;
  if (trans) {
    set_has_trans();
  } else {
    clear_has_trans();
  }
}

// optional bytes id = 20;
inline bool SignedTransaction::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SignedTransaction::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SignedTransaction::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SignedTransaction::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& SignedTransaction::id() const {
  return *id_;
}
inline void SignedTransaction::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SignedTransaction::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SignedTransaction::set_id(const void* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SignedTransaction::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* SignedTransaction::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SignedTransaction::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes sig = 30;
inline bool SignedTransaction::has_sig() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SignedTransaction::set_has_sig() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SignedTransaction::clear_has_sig() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SignedTransaction::clear_sig() {
  if (sig_ != &::google::protobuf::internal::kEmptyString) {
    sig_->clear();
  }
  clear_has_sig();
}
inline const ::std::string& SignedTransaction::sig() const {
  return *sig_;
}
inline void SignedTransaction::set_sig(const ::std::string& value) {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    sig_ = new ::std::string;
  }
  sig_->assign(value);
}
inline void SignedTransaction::set_sig(const char* value) {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    sig_ = new ::std::string;
  }
  sig_->assign(value);
}
inline void SignedTransaction::set_sig(const void* value, size_t size) {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    sig_ = new ::std::string;
  }
  sig_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SignedTransaction::mutable_sig() {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    sig_ = new ::std::string;
  }
  return sig_;
}
inline ::std::string* SignedTransaction::release_sig() {
  clear_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sig_;
    sig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SignedTransaction::set_allocated_sig(::std::string* sig) {
  if (sig_ != &::google::protobuf::internal::kEmptyString) {
    delete sig_;
  }
  if (sig) {
    set_has_sig();
    sig_ = sig;
  } else {
    clear_has_sig();
    sig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string fantasy_name = 40;
inline bool SignedTransaction::has_fantasy_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SignedTransaction::set_has_fantasy_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SignedTransaction::clear_has_fantasy_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SignedTransaction::clear_fantasy_name() {
  if (fantasy_name_ != &::google::protobuf::internal::kEmptyString) {
    fantasy_name_->clear();
  }
  clear_has_fantasy_name();
}
inline const ::std::string& SignedTransaction::fantasy_name() const {
  return *fantasy_name_;
}
inline void SignedTransaction::set_fantasy_name(const ::std::string& value) {
  set_has_fantasy_name();
  if (fantasy_name_ == &::google::protobuf::internal::kEmptyString) {
    fantasy_name_ = new ::std::string;
  }
  fantasy_name_->assign(value);
}
inline void SignedTransaction::set_fantasy_name(const char* value) {
  set_has_fantasy_name();
  if (fantasy_name_ == &::google::protobuf::internal::kEmptyString) {
    fantasy_name_ = new ::std::string;
  }
  fantasy_name_->assign(value);
}
inline void SignedTransaction::set_fantasy_name(const char* value, size_t size) {
  set_has_fantasy_name();
  if (fantasy_name_ == &::google::protobuf::internal::kEmptyString) {
    fantasy_name_ = new ::std::string;
  }
  fantasy_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SignedTransaction::mutable_fantasy_name() {
  set_has_fantasy_name();
  if (fantasy_name_ == &::google::protobuf::internal::kEmptyString) {
    fantasy_name_ = new ::std::string;
  }
  return fantasy_name_;
}
inline ::std::string* SignedTransaction::release_fantasy_name() {
  clear_has_fantasy_name();
  if (fantasy_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fantasy_name_;
    fantasy_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SignedTransaction::set_allocated_fantasy_name(::std::string* fantasy_name) {
  if (fantasy_name_ != &::google::protobuf::internal::kEmptyString) {
    delete fantasy_name_;
  }
  if (fantasy_name) {
    set_has_fantasy_name();
    fantasy_name_ = fantasy_name;
  } else {
    clear_has_fantasy_name();
    fantasy_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// BlockHeader

// optional int32 version = 1;
inline bool BlockHeader::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockHeader::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlockHeader::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlockHeader::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 BlockHeader::version() const {
  return version_;
}
inline void BlockHeader::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
}

// optional int32 num = 10;
inline bool BlockHeader::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockHeader::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlockHeader::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlockHeader::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 BlockHeader::num() const {
  return num_;
}
inline void BlockHeader::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// optional bytes prev_id = 20;
inline bool BlockHeader::has_prev_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlockHeader::set_has_prev_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlockHeader::clear_has_prev_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlockHeader::clear_prev_id() {
  if (prev_id_ != &::google::protobuf::internal::kEmptyString) {
    prev_id_->clear();
  }
  clear_has_prev_id();
}
inline const ::std::string& BlockHeader::prev_id() const {
  return *prev_id_;
}
inline void BlockHeader::set_prev_id(const ::std::string& value) {
  set_has_prev_id();
  if (prev_id_ == &::google::protobuf::internal::kEmptyString) {
    prev_id_ = new ::std::string;
  }
  prev_id_->assign(value);
}
inline void BlockHeader::set_prev_id(const char* value) {
  set_has_prev_id();
  if (prev_id_ == &::google::protobuf::internal::kEmptyString) {
    prev_id_ = new ::std::string;
  }
  prev_id_->assign(value);
}
inline void BlockHeader::set_prev_id(const void* value, size_t size) {
  set_has_prev_id();
  if (prev_id_ == &::google::protobuf::internal::kEmptyString) {
    prev_id_ = new ::std::string;
  }
  prev_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BlockHeader::mutable_prev_id() {
  set_has_prev_id();
  if (prev_id_ == &::google::protobuf::internal::kEmptyString) {
    prev_id_ = new ::std::string;
  }
  return prev_id_;
}
inline ::std::string* BlockHeader::release_prev_id() {
  clear_has_prev_id();
  if (prev_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = prev_id_;
    prev_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BlockHeader::set_allocated_prev_id(::std::string* prev_id) {
  if (prev_id_ != &::google::protobuf::internal::kEmptyString) {
    delete prev_id_;
  }
  if (prev_id) {
    set_has_prev_id();
    prev_id_ = prev_id;
  } else {
    clear_has_prev_id();
    prev_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 timestamp = 21;
inline bool BlockHeader::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlockHeader::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlockHeader::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlockHeader::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline ::google::protobuf::int32 BlockHeader::timestamp() const {
  return timestamp_;
}
inline void BlockHeader::set_timestamp(::google::protobuf::int32 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// optional bytes generator_pk = 30;
inline bool BlockHeader::has_generator_pk() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlockHeader::set_has_generator_pk() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BlockHeader::clear_has_generator_pk() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BlockHeader::clear_generator_pk() {
  if (generator_pk_ != &::google::protobuf::internal::kEmptyString) {
    generator_pk_->clear();
  }
  clear_has_generator_pk();
}
inline const ::std::string& BlockHeader::generator_pk() const {
  return *generator_pk_;
}
inline void BlockHeader::set_generator_pk(const ::std::string& value) {
  set_has_generator_pk();
  if (generator_pk_ == &::google::protobuf::internal::kEmptyString) {
    generator_pk_ = new ::std::string;
  }
  generator_pk_->assign(value);
}
inline void BlockHeader::set_generator_pk(const char* value) {
  set_has_generator_pk();
  if (generator_pk_ == &::google::protobuf::internal::kEmptyString) {
    generator_pk_ = new ::std::string;
  }
  generator_pk_->assign(value);
}
inline void BlockHeader::set_generator_pk(const void* value, size_t size) {
  set_has_generator_pk();
  if (generator_pk_ == &::google::protobuf::internal::kEmptyString) {
    generator_pk_ = new ::std::string;
  }
  generator_pk_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BlockHeader::mutable_generator_pk() {
  set_has_generator_pk();
  if (generator_pk_ == &::google::protobuf::internal::kEmptyString) {
    generator_pk_ = new ::std::string;
  }
  return generator_pk_;
}
inline ::std::string* BlockHeader::release_generator_pk() {
  clear_has_generator_pk();
  if (generator_pk_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = generator_pk_;
    generator_pk_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BlockHeader::set_allocated_generator_pk(::std::string* generator_pk) {
  if (generator_pk_ != &::google::protobuf::internal::kEmptyString) {
    delete generator_pk_;
  }
  if (generator_pk) {
    set_has_generator_pk();
    generator_pk_ = generator_pk;
  } else {
    clear_has_generator_pk();
    generator_pk_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes generating_sig = 40;
inline bool BlockHeader::has_generating_sig() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BlockHeader::set_has_generating_sig() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BlockHeader::clear_has_generating_sig() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BlockHeader::clear_generating_sig() {
  if (generating_sig_ != &::google::protobuf::internal::kEmptyString) {
    generating_sig_->clear();
  }
  clear_has_generating_sig();
}
inline const ::std::string& BlockHeader::generating_sig() const {
  return *generating_sig_;
}
inline void BlockHeader::set_generating_sig(const ::std::string& value) {
  set_has_generating_sig();
  if (generating_sig_ == &::google::protobuf::internal::kEmptyString) {
    generating_sig_ = new ::std::string;
  }
  generating_sig_->assign(value);
}
inline void BlockHeader::set_generating_sig(const char* value) {
  set_has_generating_sig();
  if (generating_sig_ == &::google::protobuf::internal::kEmptyString) {
    generating_sig_ = new ::std::string;
  }
  generating_sig_->assign(value);
}
inline void BlockHeader::set_generating_sig(const void* value, size_t size) {
  set_has_generating_sig();
  if (generating_sig_ == &::google::protobuf::internal::kEmptyString) {
    generating_sig_ = new ::std::string;
  }
  generating_sig_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BlockHeader::mutable_generating_sig() {
  set_has_generating_sig();
  if (generating_sig_ == &::google::protobuf::internal::kEmptyString) {
    generating_sig_ = new ::std::string;
  }
  return generating_sig_;
}
inline ::std::string* BlockHeader::release_generating_sig() {
  clear_has_generating_sig();
  if (generating_sig_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = generating_sig_;
    generating_sig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BlockHeader::set_allocated_generating_sig(::std::string* generating_sig) {
  if (generating_sig_ != &::google::protobuf::internal::kEmptyString) {
    delete generating_sig_;
  }
  if (generating_sig) {
    set_has_generating_sig();
    generating_sig_ = generating_sig;
  } else {
    clear_has_generating_sig();
    generating_sig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 basetarget = 50;
inline bool BlockHeader::has_basetarget() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BlockHeader::set_has_basetarget() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BlockHeader::clear_has_basetarget() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BlockHeader::clear_basetarget() {
  basetarget_ = 0;
  clear_has_basetarget();
}
inline ::google::protobuf::int32 BlockHeader::basetarget() const {
  return basetarget_;
}
inline void BlockHeader::set_basetarget(::google::protobuf::int32 value) {
  set_has_basetarget();
  basetarget_ = value;
}

// optional .fantasybit.BlockHeader.Type blocktype = 60;
inline bool BlockHeader::has_blocktype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BlockHeader::set_has_blocktype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BlockHeader::clear_has_blocktype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BlockHeader::clear_blocktype() {
  blocktype_ = 1;
  clear_has_blocktype();
}
inline ::fantasybit::BlockHeader_Type BlockHeader::blocktype() const {
  return static_cast< ::fantasybit::BlockHeader_Type >(blocktype_);
}
inline void BlockHeader::set_blocktype(::fantasybit::BlockHeader_Type value) {
  assert(::fantasybit::BlockHeader_Type_IsValid(value));
  set_has_blocktype();
  blocktype_ = value;
}

// optional bytes transaction_id = 70;
inline bool BlockHeader::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BlockHeader::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BlockHeader::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BlockHeader::clear_transaction_id() {
  if (transaction_id_ != &::google::protobuf::internal::kEmptyString) {
    transaction_id_->clear();
  }
  clear_has_transaction_id();
}
inline const ::std::string& BlockHeader::transaction_id() const {
  return *transaction_id_;
}
inline void BlockHeader::set_transaction_id(const ::std::string& value) {
  set_has_transaction_id();
  if (transaction_id_ == &::google::protobuf::internal::kEmptyString) {
    transaction_id_ = new ::std::string;
  }
  transaction_id_->assign(value);
}
inline void BlockHeader::set_transaction_id(const char* value) {
  set_has_transaction_id();
  if (transaction_id_ == &::google::protobuf::internal::kEmptyString) {
    transaction_id_ = new ::std::string;
  }
  transaction_id_->assign(value);
}
inline void BlockHeader::set_transaction_id(const void* value, size_t size) {
  set_has_transaction_id();
  if (transaction_id_ == &::google::protobuf::internal::kEmptyString) {
    transaction_id_ = new ::std::string;
  }
  transaction_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BlockHeader::mutable_transaction_id() {
  set_has_transaction_id();
  if (transaction_id_ == &::google::protobuf::internal::kEmptyString) {
    transaction_id_ = new ::std::string;
  }
  return transaction_id_;
}
inline ::std::string* BlockHeader::release_transaction_id() {
  clear_has_transaction_id();
  if (transaction_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = transaction_id_;
    transaction_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BlockHeader::set_allocated_transaction_id(::std::string* transaction_id) {
  if (transaction_id_ != &::google::protobuf::internal::kEmptyString) {
    delete transaction_id_;
  }
  if (transaction_id) {
    set_has_transaction_id();
    transaction_id_ = transaction_id;
  } else {
    clear_has_transaction_id();
    transaction_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SignedBlockHeader

// optional .fantasybit.BlockHeader head = 10;
inline bool SignedBlockHeader::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignedBlockHeader::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignedBlockHeader::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignedBlockHeader::clear_head() {
  if (head_ != NULL) head_->::fantasybit::BlockHeader::Clear();
  clear_has_head();
}
inline const ::fantasybit::BlockHeader& SignedBlockHeader::head() const {
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::fantasybit::BlockHeader* SignedBlockHeader::mutable_head() {
  set_has_head();
  if (head_ == NULL) head_ = new ::fantasybit::BlockHeader;
  return head_;
}
inline ::fantasybit::BlockHeader* SignedBlockHeader::release_head() {
  clear_has_head();
  ::fantasybit::BlockHeader* temp = head_;
  head_ = NULL;
  return temp;
}
inline void SignedBlockHeader::set_allocated_head(::fantasybit::BlockHeader* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
}

// optional string sig = 30;
inline bool SignedBlockHeader::has_sig() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SignedBlockHeader::set_has_sig() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SignedBlockHeader::clear_has_sig() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SignedBlockHeader::clear_sig() {
  if (sig_ != &::google::protobuf::internal::kEmptyString) {
    sig_->clear();
  }
  clear_has_sig();
}
inline const ::std::string& SignedBlockHeader::sig() const {
  return *sig_;
}
inline void SignedBlockHeader::set_sig(const ::std::string& value) {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    sig_ = new ::std::string;
  }
  sig_->assign(value);
}
inline void SignedBlockHeader::set_sig(const char* value) {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    sig_ = new ::std::string;
  }
  sig_->assign(value);
}
inline void SignedBlockHeader::set_sig(const char* value, size_t size) {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    sig_ = new ::std::string;
  }
  sig_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SignedBlockHeader::mutable_sig() {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    sig_ = new ::std::string;
  }
  return sig_;
}
inline ::std::string* SignedBlockHeader::release_sig() {
  clear_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sig_;
    sig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SignedBlockHeader::set_allocated_sig(::std::string* sig) {
  if (sig_ != &::google::protobuf::internal::kEmptyString) {
    delete sig_;
  }
  if (sig) {
    set_has_sig();
    sig_ = sig;
  } else {
    clear_has_sig();
    sig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Block

// optional .fantasybit.SignedBlockHeader signedhead = 10;
inline bool Block::has_signedhead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Block::set_has_signedhead() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Block::clear_has_signedhead() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Block::clear_signedhead() {
  if (signedhead_ != NULL) signedhead_->::fantasybit::SignedBlockHeader::Clear();
  clear_has_signedhead();
}
inline const ::fantasybit::SignedBlockHeader& Block::signedhead() const {
  return signedhead_ != NULL ? *signedhead_ : *default_instance_->signedhead_;
}
inline ::fantasybit::SignedBlockHeader* Block::mutable_signedhead() {
  set_has_signedhead();
  if (signedhead_ == NULL) signedhead_ = new ::fantasybit::SignedBlockHeader;
  return signedhead_;
}
inline ::fantasybit::SignedBlockHeader* Block::release_signedhead() {
  clear_has_signedhead();
  ::fantasybit::SignedBlockHeader* temp = signedhead_;
  signedhead_ = NULL;
  return temp;
}
inline void Block::set_allocated_signedhead(::fantasybit::SignedBlockHeader* signedhead) {
  delete signedhead_;
  signedhead_ = signedhead;
  if (signedhead) {
    set_has_signedhead();
  } else {
    clear_has_signedhead();
  }
}

// repeated .fantasybit.SignedTransaction signed_transactions = 20;
inline int Block::signed_transactions_size() const {
  return signed_transactions_.size();
}
inline void Block::clear_signed_transactions() {
  signed_transactions_.Clear();
}
inline const ::fantasybit::SignedTransaction& Block::signed_transactions(int index) const {
  return signed_transactions_.Get(index);
}
inline ::fantasybit::SignedTransaction* Block::mutable_signed_transactions(int index) {
  return signed_transactions_.Mutable(index);
}
inline ::fantasybit::SignedTransaction* Block::add_signed_transactions() {
  return signed_transactions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fantasybit::SignedTransaction >&
Block::signed_transactions() const {
  return signed_transactions_;
}
inline ::google::protobuf::RepeatedPtrField< ::fantasybit::SignedTransaction >*
Block::mutable_signed_transactions() {
  return &signed_transactions_;
}

// -------------------------------------------------------------------

// NodeRequest

// optional .fantasybit.NodeRequest.Type type = 10;
inline bool NodeRequest::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NodeRequest::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NodeRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NodeRequest::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::fantasybit::NodeRequest_Type NodeRequest::type() const {
  return static_cast< ::fantasybit::NodeRequest_Type >(type_);
}
inline void NodeRequest::set_type(::fantasybit::NodeRequest_Type value) {
  assert(::fantasybit::NodeRequest_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string myip = 20;
inline bool NodeRequest::has_myip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NodeRequest::set_has_myip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NodeRequest::clear_has_myip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NodeRequest::clear_myip() {
  if (myip_ != &::google::protobuf::internal::kEmptyString) {
    myip_->clear();
  }
  clear_has_myip();
}
inline const ::std::string& NodeRequest::myip() const {
  return *myip_;
}
inline void NodeRequest::set_myip(const ::std::string& value) {
  set_has_myip();
  if (myip_ == &::google::protobuf::internal::kEmptyString) {
    myip_ = new ::std::string;
  }
  myip_->assign(value);
}
inline void NodeRequest::set_myip(const char* value) {
  set_has_myip();
  if (myip_ == &::google::protobuf::internal::kEmptyString) {
    myip_ = new ::std::string;
  }
  myip_->assign(value);
}
inline void NodeRequest::set_myip(const char* value, size_t size) {
  set_has_myip();
  if (myip_ == &::google::protobuf::internal::kEmptyString) {
    myip_ = new ::std::string;
  }
  myip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NodeRequest::mutable_myip() {
  set_has_myip();
  if (myip_ == &::google::protobuf::internal::kEmptyString) {
    myip_ = new ::std::string;
  }
  return myip_;
}
inline ::std::string* NodeRequest::release_myip() {
  clear_has_myip();
  if (myip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = myip_;
    myip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NodeRequest::set_allocated_myip(::std::string* myip) {
  if (myip_ != &::google::protobuf::internal::kEmptyString) {
    delete myip_;
  }
  if (myip) {
    set_has_myip();
    myip_ = myip;
  } else {
    clear_has_myip();
    myip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 num = 30;
inline bool NodeRequest::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NodeRequest::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NodeRequest::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NodeRequest::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 NodeRequest::num() const {
  return num_;
}
inline void NodeRequest::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// optional string myhost = 40;
inline bool NodeRequest::has_myhost() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NodeRequest::set_has_myhost() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NodeRequest::clear_has_myhost() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NodeRequest::clear_myhost() {
  if (myhost_ != &::google::protobuf::internal::kEmptyString) {
    myhost_->clear();
  }
  clear_has_myhost();
}
inline const ::std::string& NodeRequest::myhost() const {
  return *myhost_;
}
inline void NodeRequest::set_myhost(const ::std::string& value) {
  set_has_myhost();
  if (myhost_ == &::google::protobuf::internal::kEmptyString) {
    myhost_ = new ::std::string;
  }
  myhost_->assign(value);
}
inline void NodeRequest::set_myhost(const char* value) {
  set_has_myhost();
  if (myhost_ == &::google::protobuf::internal::kEmptyString) {
    myhost_ = new ::std::string;
  }
  myhost_->assign(value);
}
inline void NodeRequest::set_myhost(const char* value, size_t size) {
  set_has_myhost();
  if (myhost_ == &::google::protobuf::internal::kEmptyString) {
    myhost_ = new ::std::string;
  }
  myhost_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NodeRequest::mutable_myhost() {
  set_has_myhost();
  if (myhost_ == &::google::protobuf::internal::kEmptyString) {
    myhost_ = new ::std::string;
  }
  return myhost_;
}
inline ::std::string* NodeRequest::release_myhost() {
  clear_has_myhost();
  if (myhost_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = myhost_;
    myhost_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NodeRequest::set_allocated_myhost(::std::string* myhost) {
  if (myhost_ != &::google::protobuf::internal::kEmptyString) {
    delete myhost_;
  }
  if (myhost) {
    set_has_myhost();
    myhost_ = myhost;
  } else {
    clear_has_myhost();
    myhost_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// NodeReply

// optional int32 hight = 10;
inline bool NodeReply::has_hight() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NodeReply::set_has_hight() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NodeReply::clear_has_hight() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NodeReply::clear_hight() {
  hight_ = 0;
  clear_has_hight();
}
inline ::google::protobuf::int32 NodeReply::hight() const {
  return hight_;
}
inline void NodeReply::set_hight(::google::protobuf::int32 value) {
  set_has_hight();
  hight_ = value;
}

// repeated string ips = 20;
inline int NodeReply::ips_size() const {
  return ips_.size();
}
inline void NodeReply::clear_ips() {
  ips_.Clear();
}
inline const ::std::string& NodeReply::ips(int index) const {
  return ips_.Get(index);
}
inline ::std::string* NodeReply::mutable_ips(int index) {
  return ips_.Mutable(index);
}
inline void NodeReply::set_ips(int index, const ::std::string& value) {
  ips_.Mutable(index)->assign(value);
}
inline void NodeReply::set_ips(int index, const char* value) {
  ips_.Mutable(index)->assign(value);
}
inline void NodeReply::set_ips(int index, const char* value, size_t size) {
  ips_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NodeReply::add_ips() {
  return ips_.Add();
}
inline void NodeReply::add_ips(const ::std::string& value) {
  ips_.Add()->assign(value);
}
inline void NodeReply::add_ips(const char* value) {
  ips_.Add()->assign(value);
}
inline void NodeReply::add_ips(const char* value, size_t size) {
  ips_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NodeReply::ips() const {
  return ips_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NodeReply::mutable_ips() {
  return &ips_;
}

// -------------------------------------------------------------------

// FantasyPlayerPoints

// optional uint32 season = 10;
inline bool FantasyPlayerPoints::has_season() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FantasyPlayerPoints::set_has_season() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FantasyPlayerPoints::clear_has_season() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FantasyPlayerPoints::clear_season() {
  season_ = 0u;
  clear_has_season();
}
inline ::google::protobuf::uint32 FantasyPlayerPoints::season() const {
  return season_;
}
inline void FantasyPlayerPoints::set_season(::google::protobuf::uint32 value) {
  set_has_season();
  season_ = value;
}

// optional uint32 week = 20;
inline bool FantasyPlayerPoints::has_week() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FantasyPlayerPoints::set_has_week() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FantasyPlayerPoints::clear_has_week() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FantasyPlayerPoints::clear_week() {
  week_ = 0u;
  clear_has_week();
}
inline ::google::protobuf::uint32 FantasyPlayerPoints::week() const {
  return week_;
}
inline void FantasyPlayerPoints::set_week(::google::protobuf::uint32 value) {
  set_has_week();
  week_ = value;
}

// optional uint32 playerid = 30;
inline bool FantasyPlayerPoints::has_playerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FantasyPlayerPoints::set_has_playerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FantasyPlayerPoints::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FantasyPlayerPoints::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 FantasyPlayerPoints::playerid() const {
  return playerid_;
}
inline void FantasyPlayerPoints::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional int32 points = 40;
inline bool FantasyPlayerPoints::has_points() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FantasyPlayerPoints::set_has_points() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FantasyPlayerPoints::clear_has_points() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FantasyPlayerPoints::clear_points() {
  points_ = 0;
  clear_has_points();
}
inline ::google::protobuf::int32 FantasyPlayerPoints::points() const {
  return points_;
}
inline void FantasyPlayerPoints::set_points(::google::protobuf::int32 value) {
  set_has_points();
  points_ = value;
}

// -------------------------------------------------------------------

// ProjectionTrans

// optional .fantasybit.FantasyPlayerPoints fpp = 10;
inline bool ProjectionTrans::has_fpp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProjectionTrans::set_has_fpp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProjectionTrans::clear_has_fpp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProjectionTrans::clear_fpp() {
  if (fpp_ != NULL) fpp_->::fantasybit::FantasyPlayerPoints::Clear();
  clear_has_fpp();
}
inline const ::fantasybit::FantasyPlayerPoints& ProjectionTrans::fpp() const {
  return fpp_ != NULL ? *fpp_ : *default_instance_->fpp_;
}
inline ::fantasybit::FantasyPlayerPoints* ProjectionTrans::mutable_fpp() {
  set_has_fpp();
  if (fpp_ == NULL) fpp_ = new ::fantasybit::FantasyPlayerPoints;
  return fpp_;
}
inline ::fantasybit::FantasyPlayerPoints* ProjectionTrans::release_fpp() {
  clear_has_fpp();
  ::fantasybit::FantasyPlayerPoints* temp = fpp_;
  fpp_ = NULL;
  return temp;
}
inline void ProjectionTrans::set_allocated_fpp(::fantasybit::FantasyPlayerPoints* fpp) {
  delete fpp_;
  fpp_ = fpp;
  if (fpp) {
    set_has_fpp();
  } else {
    clear_has_fpp();
  }
}

// -------------------------------------------------------------------

// Data

// optional int32 version = 10;
inline bool Data::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Data::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Data::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Data::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 Data::version() const {
  return version_;
}
inline void Data::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
}

// optional .fantasybit.DataType type = 20;
inline bool Data::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Data::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Data::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Data::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::fantasybit::DataType Data::type() const {
  return static_cast< ::fantasybit::DataType >(type_);
}
inline void Data::set_type(::fantasybit::DataType value) {
  assert(::fantasybit::DataType_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// PlayerData

// optional uint32 playerid = 10;
inline bool PlayerData::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerData::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerData::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerData::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 PlayerData::playerid() const {
  return playerid_;
}
inline void PlayerData::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional uint32 teamid = 20;
inline bool PlayerData::has_teamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerData::set_has_teamid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerData::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerData::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 PlayerData::teamid() const {
  return teamid_;
}
inline void PlayerData::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
}

// -------------------------------------------------------------------

// TeamData

// optional uint32 teamid = 10;
inline bool TeamData::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamData::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamData::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamData::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 TeamData::teamid() const {
  return teamid_;
}
inline void TeamData::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
}

// -------------------------------------------------------------------

// ResultData

// optional .fantasybit.FantasyPlayerPoints fpp = 10;
inline bool ResultData::has_fpp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResultData::set_has_fpp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResultData::clear_has_fpp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResultData::clear_fpp() {
  if (fpp_ != NULL) fpp_->::fantasybit::FantasyPlayerPoints::Clear();
  clear_has_fpp();
}
inline const ::fantasybit::FantasyPlayerPoints& ResultData::fpp() const {
  return fpp_ != NULL ? *fpp_ : *default_instance_->fpp_;
}
inline ::fantasybit::FantasyPlayerPoints* ResultData::mutable_fpp() {
  set_has_fpp();
  if (fpp_ == NULL) fpp_ = new ::fantasybit::FantasyPlayerPoints;
  return fpp_;
}
inline ::fantasybit::FantasyPlayerPoints* ResultData::release_fpp() {
  clear_has_fpp();
  ::fantasybit::FantasyPlayerPoints* temp = fpp_;
  fpp_ = NULL;
  return temp;
}
inline void ResultData::set_allocated_fpp(::fantasybit::FantasyPlayerPoints* fpp) {
  delete fpp_;
  fpp_ = fpp;
  if (fpp) {
    set_has_fpp();
  } else {
    clear_has_fpp();
  }
}

// -------------------------------------------------------------------

// DataTransition

// optional .fantasybit.DataTransition.Type type = 1;
inline bool DataTransition::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataTransition::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataTransition::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataTransition::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::fantasybit::DataTransition_Type DataTransition::type() const {
  return static_cast< ::fantasybit::DataTransition_Type >(type_);
}
inline void DataTransition::set_type(::fantasybit::DataTransition_Type value) {
  assert(::fantasybit::DataTransition_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional uint32 season = 10;
inline bool DataTransition::has_season() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataTransition::set_has_season() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataTransition::clear_has_season() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataTransition::clear_season() {
  season_ = 0u;
  clear_has_season();
}
inline ::google::protobuf::uint32 DataTransition::season() const {
  return season_;
}
inline void DataTransition::set_season(::google::protobuf::uint32 value) {
  set_has_season();
  season_ = value;
}

// optional uint32 week = 20;
inline bool DataTransition::has_week() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataTransition::set_has_week() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataTransition::clear_has_week() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataTransition::clear_week() {
  week_ = 0u;
  clear_has_week();
}
inline ::google::protobuf::uint32 DataTransition::week() const {
  return week_;
}
inline void DataTransition::set_week(::google::protobuf::uint32 value) {
  set_has_week();
  week_ = value;
}

// repeated uint32 teamid = 30;
inline int DataTransition::teamid_size() const {
  return teamid_.size();
}
inline void DataTransition::clear_teamid() {
  teamid_.Clear();
}
inline ::google::protobuf::uint32 DataTransition::teamid(int index) const {
  return teamid_.Get(index);
}
inline void DataTransition::set_teamid(int index, ::google::protobuf::uint32 value) {
  teamid_.Set(index, value);
}
inline void DataTransition::add_teamid(::google::protobuf::uint32 value) {
  teamid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DataTransition::teamid() const {
  return teamid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DataTransition::mutable_teamid() {
  return &teamid_;
}

// repeated .fantasybit.Data data = 40;
inline int DataTransition::data_size() const {
  return data_.size();
}
inline void DataTransition::clear_data() {
  data_.Clear();
}
inline const ::fantasybit::Data& DataTransition::data(int index) const {
  return data_.Get(index);
}
inline ::fantasybit::Data* DataTransition::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::fantasybit::Data* DataTransition::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::fantasybit::Data >&
DataTransition::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::fantasybit::Data >*
DataTransition::mutable_data() {
  return &data_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace fantasybit

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fantasybit::OutData_Type>() {
  return ::fantasybit::OutData_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fantasybit::InData_Type>() {
  return ::fantasybit::InData_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fantasybit::NameProof_Type>() {
  return ::fantasybit::NameProof_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fantasybit::BlockHeader_Type>() {
  return ::fantasybit::BlockHeader_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fantasybit::NodeRequest_Type>() {
  return ::fantasybit::NodeRequest_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fantasybit::DataTransition_Type>() {
  return ::fantasybit::DataTransition_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fantasybit::MyNameStatus>() {
  return ::fantasybit::MyNameStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fantasybit::TransType>() {
  return ::fantasybit::TransType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fantasybit::DataType>() {
  return ::fantasybit::DataType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtoData_2eproto__INCLUDED
